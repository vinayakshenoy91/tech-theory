1) Create a configuration:

@Configuration                                      
public class ProjectConfig {

  @Bean                                             
  public UserDetailsService userDetailsService() {
    var userDetailsService = 
        new InMemoryUserDetailsManager();           
        
    return userDetailsService;
  }
}

2) Next, thigs to be created as part of this:

Create at least one user who has a set of credentials (username and password)

Add the user to be managed by our implementation of UserDetailsService

Define a bean of the type PasswordEncoder that our application can use to verify a given password 
with the one stored and managed by UserDetailsService

3) When building the instance, we have to provide the username, the password, and at least one authority. 
The authority is an action allowed for that user, and we can use any string for this.


4) Enhance the config:

@Configuration
public class ProjectConfig {

  @Bean
  public UserDetailsService userDetailsService() {
    var userDetailsService = 
        new InMemoryUserDetailsManager();

    var user = User.withUsername("john")   //You’ll find the class User in the org.springframework.security.core .userdetails package.  
            .password("12345")                
            .authorities("read")              
            .build();                         
        
    userDetailsService.createUser(user);      

    return userDetailsService;
  }

  @Bean
  public PasswordEncoder passwordEncoder() {
    return NoOpPasswordEncoder.getInstance();
  }
}

5) When using the default UserDetailsService, a PasswordEncoder is also auto-configured. Added in above class.

The NoOpPasswordEncoder instance treats passwords as plain text. It doesn’t encrypt or hash them. For matching, 
NoOpPasswordEncoder only compares the strings using the underlying equals(Object o) method of the String class. 
You shouldn’t use this type of PasswordEncoder in a production-ready app. NoOpPasswordEncoder is a good option for 
examples where you don’t want to focus on the hashing algorithm of the password. Therefore, 
the developers of the class marked it as @Deprecated, and your development environment will show its name with a strikethrough.

6) Customising auth mechnism:
 HTTP Basic authentication doesn’t fit into most application architectures. Sometimes we’d like to change it to match 
 our application. Similarly, not all endpoints of an application need to be secured, and for those that do, we might need 
 to choose different authorization rules. To make such changes, we start by extending the WebSecurityConfigurerAdapter class. 


//Use userDetails and passwordEncoder instead of bean

@Configuration
public class ProjectConfig  extends WebSecurityConfigurerAdapter {

  // Omitted code

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http.httpBasic();
    http.authorizeRequests()               
          .anyRequest().authenticated();  //All the requests require authentication.
    http.authorizeRequests()              
           .anyRequest().permitAll();  //Allow all 
  
  }

  @Override
  protected void configure(
      AuthenticationManagerBuilder auth) 
         throws  Exception {
    var userDetailsService = 
        new InMemoryUserDetailsManager();                

    var user = User.withUsername("john")                 
                .password("12345")                       
                .authorities("read")                     
                .build();                                

    userDetailsService.createUser(user);                 

    auth.userDetailsService(userDetailsService)          
        .passwordEncoder(NoOpPasswordEncoder.getInstance());
  }
}


OR

@Configuration
public class ProjectConfig 
  extends WebSecurityConfigurerAdapter {

  @Bean
  public PasswordEncoder passwordEncoder() {        
    return NoOpPasswordEncoder.getInstance();
  }

  @Override
  protected void configure
  ➥ (AuthenticationManagerBuilder auth) throws Exception {
    var userDetailsService = new InMemoryUserDetailsManager();

    var user = User.withUsername("john")
                .password("12345")
                .authorities("read")
                .build();

    userDetailsService.createUser(user);

    auth.userDetailsService(userDetailsService);    
  }

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http.httpBasic();
    http.authorizeRequests()
          .anyRequest().authenticated();
  }
}



Note: User beans or WebSecuirtyConfigurerAdapter:
Any of these configuration options are correct. The first option, where we add the beans to the context, 
lets you inject the values in another class where you might potentially need them. But if you don’t need 
that for your case, the second option would be equally good. However, I recommend you avoid mixing configurations 
because it might create confusion.
