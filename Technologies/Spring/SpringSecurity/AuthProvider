Creating custom auth provider:
-----------------------------

1) Create auth provider:

@Component
public class CustomAuthenticationProvider implements AuthenticationProvider {

  @Override
  public Authentication authenticate(Authentication authentication) throws AuthenticationException {

         String username = authentication.getName();             
         String password = String.valueOf(authentication.getCredentials());

  if ("john".equals(username) && "12345".equals(password)) {                        
      
    return new UsernamePasswordAuthenticationToken(username, password, Arrays.asList());
  } else {
    throw new AuthenticationCredentialsNotFoundException("Error in authentication!");
  }
  }

  @Override
  public boolean supports(Class<?> authenticationType) {

    return UsernamePasswordAuthenticationToken.class
                  .isAssignableFrom(authenticationType);
  }
}

2) Registering auth provider in config class:

@Configuration
public class ProjectConfig extends WebSecurityConfigurerAdapter {

  @Autowired
  private CustomAuthenticationProvider authenticationProvider;

  @Override
  protected void configure(AuthenticationManagerBuilder auth) {
    auth.authenticationProvider(authenticationProvider);
  }

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http.httpBasic();
    http.authorizeRequests().anyRequest().authenticated();
  }
}


-------------Separate user mgmt and authorization config-------------

//User mgmt config

@Configuration
public class UserManagementConfig {

  @Bean
  public UserDetailsService userDetailsService() {
    var userDetailsService = new InMemoryUserDetailsManager();

    var user = User.withUsername("john")
            .password("12345")
            .authorities("read")
            .build();

    userDetailsService.createUser(user);
    return userDetailsService;
  }

  @Bean
  public PasswordEncoder passwordEncoder() {
    return NoOpPasswordEncoder.getInstance();
  }
}

//Web auth config:

@Configuration
public class WebAuthorizationConfig extends WebSecurityConfigurerAdapter {

  @Override
  protected void configure(HttpSecurity http) throws Exception {
    http.httpBasic();
    http.authorizeRequests().anyRequest().authenticated();
  }
}


NOTE You can’t have both classes extending WebSecurityConfigurerAdapter in this case. 
If you do so, the dependency injection fails. You might solve the dependency injection by 
setting the priority for injection using the @Order annotation. But, functionally, this won’t 
work, as the configurations exclude each other instead of merging.