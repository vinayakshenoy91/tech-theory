- A Stream in Java can be defined as a sequence of elements from a source that supports aggregate operations on them. 
The source here refers to collections or arrays that provide data to a stream.

A few important points about streams are:

1) A stream is not a data structure itself. It is a bunch of operations applied to a source. 
The source can be collections, arrays or I/O channels.
2) Streams don’t change the original data structure.
3) There can be zero or more intermediate operations that transform a stream into another stream.
4) Each intermediate operation is lazily executed (This will be discussed later).
5) Terminal operations produce the result of the stream.

Stream creation:
----------------
Streams can be created from different element sources, e.g., a collection or an array with the help of stream() and of() methods.

a) Stream.of(v1, v2, v3….):
----------------------------
Stream<Integer> stream = Stream.of(1,2,3,4,5,6,7,8,9);
stream.forEach(p -> System.out.println(p));

b) List.stream():
-----------------
List<String> list = new ArrayList<>();
list.add("a");
list.add("b");
list.add("c");
list.add("d");

Stream<String> stream = list.stream();
stream.forEach(p -> System.out.println(p));

Stream interface:
-----------------
The Stream API defines a few interfaces such as Stream, IntStream, LongStream, etc.
The Stream<T> interface is for object elements. For primitives, it defines IntStream, LongStream and DoubleStream interfaces.

- It is a good practice to use primitive streams if you are dealing with primitives because wrapping primitives to objects 
and auto-boxing is a costly process.


