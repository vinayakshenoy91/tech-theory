Map:
---

The map() method takes a lambda expression as its only argument and uses it to change every individual element in the stream.
Its return value is a new stream object containing the changed elements.

<R> Stream<R> map(Function<? super T, ? extends R> mapper)

List<String> list = new ArrayList<>();
        list.add("Dave");
        list.add("Joe");
        list.add("Ryan");
        list.add("Iyan");
        list.add("Ray");
        // map() is used to convert each name to upper case.
        // Note: The map() method does not modify the original list.
        list.stream()
                .map(name -> name.toUpperCase()) //map() takes an input of Function<T, R> type.
                .forEach(System.out::println);   // forEach() takes an input of Consumer type.


list.stream()
 .mapToInt(name -> name.length()) //mapToLong() or mapToDouble()
 .forEach(System.out::println);

Flatmap:
-------

Basically, flatMap() is used to do following operation:
Stream flatMap() method is used to flatten a stream of collections to a stream of elements combined from all collections.

- Stream<String[]> -> flatMap -> Stream<String>
- Stream<Set<String>> -> flatMap -> Stream<String>
- Stream<List<String>> -> flatMap -> Stream<String>

Why plattern stream? The reason is that intermediate methods such as filter() and distinct() do not work on streams of Collections.


 List<List<String>> list = new ArrayList<>();
        list.add(Arrays.asList("a","b","c"));
        list.add(Arrays.asList("d","e","f"));
        list.add(Arrays.asList("g","h","i"));
        list.add(Arrays.asList("j","k","l"));
        //Created a stream from the list.
        Stream<List<String>> stream1 = list.stream();
        // Flattened the stream.
        Stream<String> stream2 = stream1.flatMap(s -> s.stream());
        //Applied filter on flattened stream.
        Stream<String> stream3 = stream2.filter(x -> "a".equals(x));
        
        stream3.forEach(System.out::println);

OR

Concise parameter:

list.stream().flatMap(s -> s.stream())
             .filter(x -> "a".equals(x))
             .forEach(System.out::println);