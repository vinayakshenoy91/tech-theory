Introduction to reduction operations #
Reduction stream operations are those operations which reduce the stream into a single value. The operations that we are going 
to discuss in this lesson are immutable operations because they reduce the result into a single-valued immutable variable. 
Given a collection of objects, we may need to get the sum of all the elements, the max element, or any other operation which gives us 
a single value as a result. This can be achieved through reduction operations.

Before we discuss all the reduction operations in detail, let’s first look at some key concepts of reduction:

Identity – an element that is the initial value of the reduction operation and the default result if the stream is empty.

Accumulator – a function that takes two parameters: a partial result of the reduction operation and the next element of the stream.

Combiner – a function used to combine the partial result of the reduction operation when

the reduction is parallelized.

or there’s a mismatch between the types of the accumulator arguments and the types of the accumulator implementation.

1. Optional<T> reduce(BinaryOperator<T> accumulator):
-------------------------------------------------------
This method takes a binary operator as an input and returns an Optional that describes the reduced value.

The reduce() method iteratively applies the accumulator function on the current input element.

 Optional<Integer> totalSalary = list.stream()
                 .map(p -> p.getSalary())  //We are converting the Stream of Employees to Stream of salaries.
                 .reduce((p,q) -> p + q);

or

int totalSalary = list.stream()
                .mapToInt(p -> p.getSalary())
                .sum();

2. T reduce(T identity, BinaryOperator<T> accumulator):
---------------------------------------------------------
- performs a reduction on the elements of this stream, using the provided identity value and an associative accumulation 
function, and returns the reduced value.

- This method has an extra ‘identity’ parameter. It is the initial value of reduction. It is the default result of reduction if there are 
no elements in the stream. That’s the reason, this version of the reduce method doesn’t return Optional because it would at least 
return the identity element.

int totalSum = list.stream()
                .reduce(5, (partialSum, num) -> partialSum + num);

3. <U> U reduce(U identity, BiFunction<U, ? super T,U> accumulator, BinaryOperator<U> combiner):
-------------------------------------------------------------------------------------------------
- this method performs a reduction on the elements of this stream, using the provided identity, accumulation and combining functions. 
If we are using a parallel stream, then the Java runtime splits the stream into multiple substreams. In such cases, 
we need to use a function to combine the results of the substreams into a single one. This is done by a combiner.

 int totalSum = list.parallelStream()
                .reduce(0, (partialSum, num) -> partialSum + num, Integer::sum);

4. max() and min():
--------------------
- max() and min() operations are very helpful if we need to get the largest or smallest element from a stream

Optional<T> max(Comparator<? super T> comparator)

Optional<Integer> max = list.stream()
                .max(Comparator.naturalOrder());

        System.out.println("Max value is " + max.get());

Optional<Integer> min = list.stream()
                .min(Comparator.naturalOrder());

        System.out.println("Min value is " + min.get());