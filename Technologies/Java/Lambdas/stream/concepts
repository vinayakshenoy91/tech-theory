- java.util.stream.Stream
- Stream is a a sequence of elements from a source that supports data processing operations.
- Streams have intermediate and terminal operation
- Streams were introduced in §1.2 as optionally ordered value sequences. In operational terms, they differ from collections 
in that they do not store values; their purpose is to process them. For example, consider a stream having a collection as its 
source: creating it causes no data to flow; when values are required by the terminal operation, the stream provides them by 
pulling them from the collection; finally, when all the collection values have been provided by the stream, it is exhausted 
and cannot be used any further. But this is not the same as being empty; streams never hold values at any point.

- The central idea behind streams is lazy evaluation: no value is ever computed until it is required.



Streams vs Iterators:
----------------------
treams are conceptually quite similar to iterators, but with important improvements:

• They handle exhaustion in a more client-friendly way. Iterators can signal exhaustion only by returning false from a hasNext 
call, so clients must test for it each time they require an element. This interaction is inherently 
fault-prone, because the time gap between the call of hasNext and next is a window of opportunity for thread interference. 
Moreover, it forces element processing into a sequential straitjacket, implemented by a complex and often inefficient interaction
 between client and library.

• Unlike iterators, which always yield their values in a deterministic sequence, streams can be unordered. 
We’ll explore this in detail in Chapter 6; for the moment, all you need to know is that opportunities for optimizing a parallel 
stream arise when we are unconcerned about the order in which its values are presented.

• They have methods (the intermediate operations) that accept behavioral parameters—transformations on streams—and 
return the stream resulting from the transformation. This allows streams to be chained together into pipelines, 

 providing not only a fluent style of programming, but also the opportunity of big performance 



• They retain information about the properties of their source—for example, whether the source values are ordered, o
r whether their count is known—that allows optimizations of value processing in ways not possible with iterators,
which retain no information besides the values themselves.

Lazy evaluation advtg:
-------------------------
- One big advantage of lazy evaluation can be seen in the “search” methods of Stream: findFirst, findAny, anyMatch, allMatch, and 
noneMatch. These are called “short-circuit” operators because they often make it unnecessary to process all the elements of a stream.

- Lazy evaluation provides another major advantage: it allows multiple logical operations to be fused together into a single pass on the data.


How streams work:
-----------------

- By contrast, a stream is a conceptually fixed data structure (you can’t add or remove elements from it)
 whose elements are computed on demand. 

By contrast, a stream is a conceptually fixed data structure (you can’t add or remove elements from it) whose elements are 
computed on demand. This gives rise to significant programming benefits. In chapter 6 we show how simple it is to construct 
a stream containing all the prime numbers (2,3,5,7,11,...) even though there are an infinite number of them. The idea is 
that a user will extract only the values they require from a stream, and these elements are produced—invisibly to the user—only 
as and when required. This is a form of a producer-consumer relationship. Another view is that a stream is like a lazily 
constructed collection: values are computed 
when they’re solicited by a consumer (in management speak this is demand-driven, or even just-in-time, manufacturing).

pipeline is broken into a stream declaration and the terminal operation call


- forEachOrdered requires a conscious decision. forEach does not perform order.


OptionaInt max = IntStream.rangeClosed(1,5).map(i->i+1).max();

The primitive stream types IntStream and LongStream have methods asDoubleStream and (for IntStream) asLongStream, 
which apply the appropriate widening coercion to each primitive value, for example:

DoubleStream ds = IntStream.rangeClosed(1, 10).asDoubleStream();

• For boxing, each of the primitive stream types has a method boxed, which returns a Stream of the appropriate wrapper 
type, for example:

Stream<Integer> is = IntStream.rangeClosed(1, 10).boxed();

• For unboxing, a Stream of wrapper values can be converted to a primitive stream by calling the appropriate map conversion 
operations (which we will see in more detail later in this section), supplying the appropriate unboxing method. For example, 
the following code creates a Stream<Integer>, then converts it to an IntStream:

Stream<Integer> integerStream = Stream.of(1, 2);
IntStream intStream = integerStream.mapToInt(Integer::intValue);

-  stream can be traversed only once. After that a stream is said to be consumed


Streams and collections philosophically
For readers who like philosophical viewpoints, you can see a stream as a set of values spread out in time. 
In contrast, a collection is a set of values spread out in space (here, computer memory), which all exist at a 
single point in time—and which you access using an iterator to access members inside a for-each loop.

Using the Collection interface requires iteration to be done by the user (for example, using for-each); this is called 
external iteration. The Streams library by contrast uses internal iteration—it does the iteration for you and takes care of 
storing the resulting stream value somewhere; you merely provide a function saying what’s to be done.



Split iterators:
----------------
- Spliterators are used to traverse the elements of a source, but they’re also designed to do this in parallel

public interface Spliterator<T> {
    boolean tryAdvance(Consumer<? super T> action);
    Spliterator<T> trySplit();
    long estimateSize();
    int characteristics();
}

- As usual, T is the type of the elements traversed by the Spliterator. The tryAdvance method behaves in a way 
similar to a normal Iterator in the sense that it’s used to sequentially consume the elements of the Spliterator 
one by one, returning true if there are still other elements to be traversed. But the trySplit method is more 
specific to the Spliterator interface because it’s used to partition off some of its elements to a second 
Spliterator (the one returned by the method), allowing the two to be processed in parallel. A Spliterator may 
also provide an estimation of the number of the elements remaining to be traversed via its estimateSize method, 
because even an inaccurate but quick-to-compute value can be useful to split the structure more or less evenly.

In the first step trySplit is invoked on the first Spliterator and generates a second one. Then in step 2 
it’s called again on these two Spliterators, which results in a total of four. The framework keeps invoking 
the method trySplit on a Spliterator until it returns null to signal that the data structure that it’s processing
 is no longer divisible, as shown in step 3. Finally, this recursive 
splitting process terminates in step 4 when all Spliterators have returned null to a trySplit invocation.