1) Filtering:
-------------
Stream<Book> computingBooks = library.stream().filter(b-> b.getTopic()==COMPUTING)

2) Mapping:
------------
- Stream<Year>bookTitles = library.stream().map(Book::GetPubDate)
- int total = library.stream().mapToInt(b->b.getAuthors().size()).sum();

3) one-to-many mapping(flatMap):
---------------------------------
Stream<String> authorStream = library.stream().flatMap(b->b.getAuthors().stream()); //One book haivng multiple authors

flatMapToInt()
flatMapToLong()
flatMapToDouble()

int total = library.stream().flatMapToInt(b->IntStream.of(b.getPageCounts())).sum()

4)
The Streams API provides such facilities through the allMatch, anyMatch, noneMatch, findFirst, and findAny methods of a stream.
menu.stream().anyMatch(Dish::isVegetarian)

menu.stream().allMatch(d -> d.getCalories() < 1000);

boolean isHealthy = menu.stream()
                        .noneMatch(d -> d.getCalories() >= 1000);

we have both findFirst and findAny. The answer is parallelism. Finding the first element is more constraining in parallel. If you don’t care about which element is returned, use findAny because it’s less constraining when using parallel streams.


6) REducing:

Optional<Integer> sum = numbers.stream().reduce((a, b) -> (a + b));
Why does it return an Optional<Integer>? Consider the case when the stream contains no elements. The reduce operation can’t return a sum because it doesn’t have an initial value. This is why the result is wrapped in an Optional object to indicate that the sum may be absent. Now see what else you can do with reduce.

Optional<Integer> max = numbers.stream().reduce(Integer::max);
Optional<Integer> min = numbers.stream().reduce(Integer::min);

Benefit of the reduce method and parallelism
The benefit of using reduce compared to the step-by-step iteration summation that you wrote earlier is that the iteration is abstracted using internal iteration, which enables the internal implementation to choose to perform the reduce operation in parallel. The iterative summation example involves shared updates to a sum variable, which doesn’t parallelize gracefully. If you add in the needed synchronization, you’ll likely discover that thread contention robs you of all the performance that parallelism was supposed to give you! Parallelizing this computation requires a different approach: partition the input, sum the partitions, and combine the sums. But now the code is starting to look really different. You’ll see what this looks like in chapter 7 using the fork/join framework. But for now it’s important to realize that the mutable accumulator pattern is a dead end for parallelization. You need a new pattern, and this is what reduce provides you. You’ll also see in chapter 7 that to sum all the elements in parallel using streams, there’s almost no modification to your code: stream() becomes parallelStream():

int sum = numbers.parallelStream().reduce(0, Integer::sum);
But there’s a price to pay to execute this code in parallel, as we explain later: the lambda passed to reduce can’t change state (for example, instance variables), and the operation needs to be associative so it can be executed in any order.

7)Primitive stream specialization:
_---------------------------------

Java 8 introduces three primitive specialized stream interfaces to tackle this issue, IntStream, DoubleStream, and LongStream, 
that respectively specialize the 
elements of a stream to be int, long, and double—and thereby avoid hidden boxing costs. 

- The most common methods you’ll use to convert a stream to a specialized version are mapToInt, mapToDouble, and mapToLong. 

IntStream intStream = menu.stream().mapToInt(Dish::getCalories);
Stream<Integer> stream = intStream.boxed(); -> Convert numeric stream to a stream

There’s a primitive specialized version of Optional as well for the three primitive stream specializations: OptionalInt, OptionalDouble, and OptionalLong.

For example, you can find the maximal element of an IntStream by calling the max method, which returns an OptionalInt:
OptionalInt maxCalories = menu.stream()
                              .mapToInt(Dish::getCalories)
                              .max();

IntStream evenNumbers  = IntStream.rangeClosed(1,100)
evenNumbers.count()

rangedSum:
----------
public static long rangedSum(long n) {
    return LongStream.rangeClosed(1, n)
                     .reduce(0L, Long::sum);
}
//fASTER
public static long parallelRangedSum(long n) {
    return LongStream.rangeClosed(1, n)
                     .parallel()
                     .reduce(0L, Long::sum);
}

