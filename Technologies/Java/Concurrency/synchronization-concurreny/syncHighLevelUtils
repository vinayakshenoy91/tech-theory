how to use high-level mechanisms to synchronize multiple threads. These high-level mechanisms are as follows:

Semaphores: A semaphore is a counter that controls access to one or more shared resources. This mechanism is one of the basic tools of concurrent programming and is provided by most programming languages.
CountDownLatch: The CountDownLatch class is a mechanism provided by the Java language that allows a thread to wait for the finalization of multiple operations.
CyclicBarrier: The CyclicBarrier class is another mechanism provided by the Java language that allows the synchronization of multiple threads at a common point.
Phaser: The Phaser class is another mechanism provided by the Java language that controls the execution of concurrent tasks divided in phases. All the threads must finish one phase before they can continue with the next one.
Exchanger: The Exchanger class is another mechanism provided by the Java language that provides a point of data interchange between two threads.
CompletableFuture: The CompletableFuture class provides a mechanism where one or more tasks can wait for the finalization of another task that will be explicitly completed in an asynchronous way in future. 
This class was introduced in Java 8 and has introduced new methods in Java 9.