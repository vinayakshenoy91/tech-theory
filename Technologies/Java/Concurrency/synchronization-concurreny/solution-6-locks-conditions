How to do it...
Follow these steps to implement the example:

First, implement a class that will simulate a text file. Create a class named FileMock with two attributes: a String array named content and int named index. They will store the content of the file and the line of the simulated file that will be retrieved:
        public class FileMock { 
 
          private String[] content; 
          private int index;
Implement the constructor of the class that initializes the content of the file with random characters:
        public FileMock(int size, int length){ 
          content = new String[size]; 
          for (int i = 0; i< size; i++){ 
            StringBuilder buffer = new StringBuilder(length); 
            for (int j = 0; j < length; j++){ 
              int randomCharacter= (int)Math.random()*255; 
              buffer.append((char)randomCharacter); 
            } 
            content[i] = buffer.toString(); 
          } 
          index=0; 
        }
Implement the hasMoreLines() method that returns true if the file has more lines to process or false if you have reached the end of the simulated file:
        public boolean hasMoreLines(){ 
          return index <content.length; 
        }
Implement the getLine() method that returns the line determined by the index attribute and increases its value:
        public String getLine(){ 
          if (this.hasMoreLines()) { 
            System.out.println("Mock: " + (content.length-index)); 
            return content[index++]; 
          } 
          return null; 
        }
Now implement a class named Buffer that will implement the buffer shared by both the producers and consumers:
        public class Buffer {
This class has six attributes:
A LinkedList<String> attribute named buffer that will store the shared data. For example:
                  private final LinkedList<String> buffer;
An int type named maxSize that will store the length of the buffer. For example:
                    private final int maxSize;
A ReentrantLock object called lock that will control access to the blocks of code that modify the buffer. For example:
                    private final ReentrantLock lock;
Two Condition attributes named lines and space. For example:
                  private final Condition lines;

                  private final Condition space;
A boolean type called pendingLines that will indicate whether there are lines in the buffer. For example:
                  private boolean pendingLines;
Implement the constructor of the class. It initializes all the attributes described previously:
        public Buffer(int maxSize) { 
          this.maxSize = maxSize; 
          buffer = new LinkedList<>(); 
          lock = new ReentrantLock(); 
          lines = lock.newCondition(); 
          space = lock.newCondition(); 
          pendingLines =true; 
        }
Implement the insert() method. It receives String as a parameter and tries to store it in the buffer. First, it gets control of the lock. When it has this, it checks whether there is empty space in the buffer. If the buffer is full, it calls the await() method in the space condition to wait for free space. The thread will be woken up when another thread calls the signal() or signalAll() method in the space condition. When this happens, the thread stores the line in the buffer and calls the signallAll() method over the lines condition. As we'll see in a moment, this condition will wake up all the threads that are waiting for lines in the buffer. To make the code easier, we ignore the InterruptedException exception. In real cases, you will probably have to process it:
        public void insert(String line) { 
          lock.lock(); 
          try { 
            while (buffer.size() == maxSize) { 
              space.await(); 
            } 
            buffer.offer(line); 
            System.out.printf("%s: Inserted Line: %d\n",
                              Thread.currentThread().getName(),
                              buffer.size()); 
            lines.signalAll(); 
          } catch (InterruptedException e) { 
            e.printStackTrace(); 
          } finally { 
            lock.unlock(); 
          } 
        }
Implement the get() method. It returns the first string stored in the buffer. First, it gets control of the lock. When this is done, it checks whether there are lines in the buffer. If the buffer is empty, it calls the await() method in the lines condition to wait for lines in the buffer. This thread will be woken up when another thread calls the signal() or signalAll() method in the lines condition. When this happens, the method gets the first line in the buffer, calls the signalAll() method over the space condition, and returns String:
        public String get() { 
          String line = null; 
          lock.lock(); 
          try { 
            while ((buffer.size() == 0) &&(hasPendingLines())) { 
              lines.await(); 
            } 
 
            if (hasPendingLines()) { 
              line = buffer.poll(); 
              System.out.printf("%s: Line Readed: %d\n",
                                Thread.currentThread().getName(),
                                buffer.size()); 
              space.signalAll(); 
            } 
          } catch (InterruptedException e) { 
            e.printStackTrace(); 
          } finally { 
            lock.unlock(); 
          } 
          return line; 
        }
Implement the setPendingLines() method that establishes the value of the pendingLines attribute. It will be called by the producer when it has no more lines to produce:
        public synchronized void setPendingLines(boolean pendingLines) { 
          this.pendingLines = pendingLines; 
        }
Implement the hasPendingLines() method. It returns true if there are more lines to be processed or false otherwise:
        public synchronized boolean hasPendingLines() { 
          return pendingLines || buffer.size()>0; 
        }
Now it's the turn of the producer. Implement a class named Producer and specify that it implements the Runnable interface:
        public class Producer implements Runnable {
Declare two attributes, namely an object of the FileMock class and an object of the Buffer class:
        private FileMock mock; 
 
        private Buffer buffer;
Implement the constructor of the class that initializes both the attributes:
        public Producer (FileMock mock, Buffer buffer){ 
          this.mock = mock; 
          this.buffer = buffer; 
        }
Implement the run() method that reads all the lines created in the FileMock object and use the insert() method to store them in the buffer. Once this is done, use the setPendingLines() method to alert the buffer that it will not generate more lines:
        @Override 
        public void run() { 
          buffer.setPendingLines(true); 
          while (mock.hasMoreLines()){ 
            String line = mock.getLine(); 
            buffer.insert(line); 
          } 
          buffer.setPendingLines(false); 
        }
Next is the consumer's turn. Implement a class named Consumer and specify that it implements the Runnable interface:
        public class Consumer implements Runnable {
Declare a Buffer object and implement the constructor of the class that initializes it:
        private Buffer buffer; 
 
        public Consumer (Buffer buffer) { 
          this.buffer = buffer; 
        }
Implement the run() method. While the buffer has pending lines, it tries to get one line and process it:
        @Override   
        public void run() { 
          while (buffer.hasPendingLines()) { 
            String line = buffer.get(); 
            processLine(line); 
          } 
        }
Implement the auxiliary method processLine(). It only sleeps for 10 milliseconds to simulate some kind of processing with the line:
        private void processLine(String line) { 
          try { 
            Random random = new Random(); 
            Thread.sleep(random.nextInt(100)); 
          } catch (InterruptedException e) { 
            e.printStackTrace(); 
          } 
        }
Implement the main class of the example by creating a class named Main and adding the main() method to it.
        public class Main { 
 
          public static void main(String[] args) {
Create a FileMock object:
        FileMock mock = new FileMock(100, 10);
Create a Buffer object:
        Buffer buffer = new Buffer(20);
Create a Producer object and Thread to run it:
        Producer producer = new Producer(mock, buffer); 
        Thread producerThread = new Thread(producer,"Producer");
Create three Consumer objects and three threads to run them:
        Consumer consumers[] = new Consumer[3]; 
        Thread consumersThreads[] = new Thread[3]; 
 
        for (int i=0; i<3; i++){ 
          consumers[i] = new Consumer(buffer); 
          consumersThreads[i] = new Thread(consumers[i],"Consumer "+i); 
        }
Start the producer and the three consumers:
        producerThread.start(); 
        for (int i = 0; i< 3; i++){ 
          consumersThreads[i].start(); 
        }