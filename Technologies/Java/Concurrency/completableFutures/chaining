One more interesting thing that we can do is combine CompletableFuture instances in a chain of computation steps. 
Suppose we want to get some data from a service and save it to the database. We can write two CompletableFuture 
instances and chain them together. The first instance will complete and share its result to the second instance.

1) thenCompose():
-----------------
- We should always use thenCompose() if you need a flat result.
- we used thenCompose() which takes the input of the previous input as a parameter

import java.util.concurrent.*;

public class CompletableFutureDemo {

    public static void main(String args[]) {

        // Create a future which returns an integer.
        CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {
            try {
                TimeUnit.SECONDS.sleep(1);
                System.out.println(Thread.currentThread().getName());
            } catch (InterruptedException e) {
                throw new IllegalStateException(e);
            }
            return 50;
        });

        // Calling thenCompose() which takes a Function as parameter. 
        // It takes a number as input and returns a CompletableFuture of double of number.
        CompletableFuture<Integer> resultFuture = future.thenCompose(num -> 
        CompletableFuture.supplyAsync(() -> num * 2));

        try {
            System.out.println(resultFuture.get());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }
    }
}


2) thenCombine():
-----------------
- However, if we want to execute two independent Futures and do something with their results, we can use the thenCombine() method.
- It accepts a Future and a BiFunction to process both results.
- The callback function passed to thenCombine() will be called when both the futures are executed.

import java.util.concurrent.*;

public class CompletableFutureDemo {

    public static void main(String args[]) {

        // Create a future which returns an integer.
        CompletableFuture<Integer> future = CompletableFuture.supplyAsync(() -> {
            try {
                TimeUnit.SECONDS.sleep(1);
                System.out.println(Thread.currentThread().getName());
            } catch (InterruptedException e) {
                throw new IllegalStateException(e);
            }
            return 50;
        });

        // Calling thenCompose() which takes a Function as parameter. 
        // It takes a number as input and returns a CompletableFuture of double of number.
        CompletableFuture<Integer> resultFuture = future.thenCombine(
                CompletableFuture.supplyAsync(() -> 20) , (num1, num2) -> num1 + num2);

        try {
            System.out.println(resultFuture.get());
        } catch (InterruptedException e) {
            e.printStackTrace();
        } catch (ExecutionException e) {
            e.printStackTrace();
        }
    }
}




