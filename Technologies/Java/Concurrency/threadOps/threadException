public class ExceptionHandler implements UncaughtExceptionHandler { 
          @Override 
          public void uncaughtException(Thread t, Throwable e) { 
            System.out.printf("An exception has been captured\n"); 
            System.out.printf("Thread: %s\n",t.getId()); 
            System.out.printf("Exception: %s: %s\n",
                              e.getClass().getName(),e.getMessage()); 
            System.out.printf("Stack Trace: \n"); 
            e.printStackTrace(System.out); 
            System.out.printf("Thread status: %s\n",t.getState()); 
          } 
        }



Task task=new Task(); 
Thread thread=new Thread(task); 
thread.setUncaughtExceptionHandler(new ExceptionHandler()); 
thread.start(); 


The Thread class has another method related to the process of uncaught exceptions. 
It's the static method setDefaultUncaughtExceptionHandler() that establishes an exception handler for 
all the thread objects in the application.

When an uncaught exception is thrown in the thread, the JVM looks for three possible handlers for 
this exception.

First it looks for the uncaught exception handler of the thread objects, as we learned in this recipe. 
If this handler doesn't exist, the JVM looks for the uncaught exception handler of ThreadGroup as explained 
in the Grouping threads and processing uncontrolled exceptions in a group of threads recipe. If this method 
doesn't exist, the JVM looks for the default uncaught exception handler, as we learned in this recipe.

If none of the handlers exits, the JVM writes the stack trace of the exception in the console and ends 
the execution of the Thread that had thrown the exception.