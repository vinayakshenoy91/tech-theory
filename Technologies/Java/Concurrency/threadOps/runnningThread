Joining two threads:
--------------------
//main thread will wait until all thread complete.
for(Thread thread:Threads){
  thread.setDaemon(true); //Incase you need to terminate it once all things finished in app.Always use timelimit
  thread.join(2000) //time in ms and is optinal
}


What if we call run() method directly instead start() method?:
---------------------------------------------------------------
- Each thread starts in a separate call stack.
- Invoking the run() method from main thread, the run() method goes onto the 
current call stack rather than at the beginning of a new call stack.
So basically the main  method will be executign the task.

If we call start() there will be context switching in main method. Else there will be no context switching.


Join method:
-------------
The join() method waits for a thread to die. 
In other words, it causes the currently running threads to stop executing until the thread it 
joins with completes its task. In below example, until t1 completes. All other task wille be blocked.
- we may have a program that will begin initializing the resources it needs before proceeding with the rest of 
the execution. We can run initialization 
tasks as threads and wait for their finalization before continuing with the rest of the program.

class TestJoinMethod1 extends Thread{  
 public void run(){  
  for(int i=1;i<=5;i++){  
   try{  
    Thread.sleep(500);  
   }catch(Exception e){System.out.println(e);}  
  System.out.println(i);  
  }  
 }  
public static void main(String args[]){  
 TestJoinMethod1 t1=new TestJoinMethod1();  
 TestJoinMethod1 t2=new TestJoinMethod1();  
 TestJoinMethod1 t3=new TestJoinMethod1();  
 t1.start();  
 try{  
  t1.join();  
 }catch(Exception e){System.out.println(e);}  
  
 t2.start();  
 t3.start();  
 }  
}  


Program of performing single task by multiple threads: [Each thread run in a separate callstack.]
------------------------------------------------------
class TestMultitasking2 implements Runnable{  
public void run(){  
System.out.println("task one");  
}  
  
public static void main(String args[]){  
Thread t1 =new Thread(new TestMultitasking2());//passing annonymous object of TestMultitasking2 class  
Thread t2 =new Thread(new TestMultitasking2());  
  
t1.start();  
t2.start();  
  
 }  
}  

Program of performing two tasks by two threads:
-------------------------------------------------
class TestMultitasking4{  
 public static void main(String args[]){  
  Thread t1=new Thread(){  
    public void run(){  
      System.out.println("task one");  
    }  
  };  
  Thread t2=new Thread(){  
    public void run(){  
      System.out.println("task two");  
    }  
  };  
  
  
  t1.start();  
  t2.start();  
 }  
}  

Program of performing two tasks by two threads:
-----------------------------------------------
class TestMultitasking5{  
 public static void main(String args[]){  
  Runnable r1=new Runnable(){  
    public void run(){  
      System.out.println("task one");  
    }  
  };  
  
  Runnable r2=new Runnable(){  
    public void run(){  
      System.out.println("task two");  
    }  
  };  
      
  Thread t1=new Thread(r1);  
  Thread t2=new Thread(r2);  
  
  t1.start();  
  t2.start();  
 }  
}  

Get task done one by one:
-------------------------
t1.start()
t1.join()
t2.start()
t2.join()


Waiting for finaliztion of both threads:
-----------------------------------------

       try { 
          thread1.join(); 
          thread2.join(); 
        } catch (InterruptedException e) { 
          e.printStackTrace(); 
        }