- garbage means unreferenced objects.
- Garbage Collection is process of reclaiming the runtime unused memory automatically. In other words, 
it is a way to destroy the unused objects'
- Any object on heap that is not referenced from stack is eligible for gc
- Soft leaks - when an object remains refernced when no longer needed.


How can an object be unreferenced?
-----------------------------------
There are many ways:

1) By nulling the reference:
Employee e=new Employee();  
e=null;  


2) By assigning a reference to another:
Employee e1=new Employee();  
Employee e2=new Employee();  
e1=e2;//now the first object referred by e1 is available for garbage collection  

3) By anonymous object:
new Employee();  


finalize() method:
-------------------
The finalize() method is invoked each time before the object is garbage collected. 
This method can be used to perform cleanup processing. This method is defined in Object class as:
protected void finalize(){}  

Note: The Garbage collector of JVM collects only those objects that are created by new keyword. So if you have created 
any object without new, you can use finalize method to perform cleanup processing (destroying remaining objects).

gc() method:
------------
The gc() method is used to invoke the garbage collector to perform cleanup processing. 
The gc() is found in System and Runtime classes.

public static void gc(){}  

Note: Garbage collection is performed by a daemon thread called Garbage Collector(GC). 
This thread calls the finalize() method before object is garbage collected.

Ex:
public class TestGarbage1{  
 public void finalize(){System.out.println("object is garbage collected");}  
 public static void main(String args[]){  
  TestGarbage1 s1=new TestGarbage1();  
  TestGarbage1 s2=new TestGarbage1();  
  s1=null;  
  s2=null;  
  System.gc();  
 }  
}  

Algos:
-------
- General algo used in gc are mark and sweep. During marking all other process stopped.
- You check if there are live reference from stack and metaspace to heap

Heap:
----
- Divided into two generation, young and old.
- Young is again split into Eden,s0,s1. S0, s1 takes alternating take on survival from minor gc.
- New obj, created in young space. No app freeze when this happens.
Survived ones are moved to old gen.Major collection happens when old gen full.


