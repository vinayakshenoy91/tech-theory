# Why generics?
--------------
- Collections are by nature hetrogenous. They can contain any object.
- Generics stop runtime errors at compile time.
- Type-safety without copy and paste
- It adds stability to code
- Most bugs can be detectable at runtime
- Strong type checks at compile time
- Eliminate type Castings
- Generic algos
- JVM casting at runtime is the issue
Note: In code review, if there is casting check if it can be eliminated using generics.


Binary compatibility of generics:
----------------------------------
You can replace a legacy class file with a generic class file without changing or recompiling any client code.

# Steps to make a class generic:
-------------------------------
a) Class changes:

1) CircularBuffer<T> ->  Make class name generics
2) Make parameters as T -> private T[] buffer; final T value;
3) Castings should be made this way -> (T[]) new Object[size];
4) Change method parameters  and return value ->  offer(T value) & public T poll()

b)Initilization phase:

5) Initialize collection as Circular<String>  buffer = new Circular<String>();


# Here we have generic patterns: 
--------------------------------

1) Implement a generic type: [Implementing a specific type][Implementing a particular interface method]
----------------------------
public class AgeComparator implements Comparator<Person>{
 public int compare(final Person o1,final Person o2){
     return 0; //Integer.compare(o1.getAge(),o2.getAge()) [Multiply this by -1 for negative]
 }
}

Collections.sort(list,new AgeComparator())


2) Passing parameter to generic type: [Fully generic type, you want generic class and compare it very generically]
-------------------------------------
If you want a reverse version of any comparator, use:

public class ReverseComparator<T> implements Comparator<T>
{
   private final Comparator<T> delegateComparator;

   public ReverseComparator(final Comparator<T>delegateComparator){
       this.delegateComparator = delegateComparator;
   }

   public int compare(final T left, final T right){
       return -1* delegateComparator.compare(left,right);
   }
}

Collections.sort(list,new ReverseComparator<>(AgeComparator()))

3) Type bounds: [If you dont want to implement that method/ tha params have some feature instead of class]
----------------
public class SortedPair<T extends Comparable<T>>{  //Used if class itself has the self compare method

   private final T first;
   private final T second;

   public SortedPair(T left, T right){
     if(left.compareTo(right)<0){
         firs=left;
         second=right;
     }
     else{
         first=right;
         second=left;
     }
   }
}