- Veriable value should not be changed once initialized.
- Variable can only be assigned once. We can change from uninitilaised to having a value.
The value withing object can change but not the object itself. It is the reference that cannot be changed.
It is like const in js
- If a method which has definition in abstract class should not be overriden, then you can declare it as final. 


Final methods cannot be overriden 
Final classes cannot be subclassed.

public static final double PI = 3.1416 //Implies a constant


final instance variable -> 
- Constant for life of object
- must be initilised in delcaration, constructor, instance initializer


final local variable ->
- constant for life of block

final static variable -> 
- Constnant irrespective of instance
- Mus tbe initilaized in declaration or static initilizer
- All CAPS with _ separated
public static final int MAX_VALUE = 0x7ffff

constant variables -> 
- Values are know at compile time itself 
- it shoudl be primitive
- Shoudl be final or STRING
- MUST Initilize in declaration => Differentiator
- initialized with compile-time constant expression
- final x = 5 -> if not final this will not be replaced below @conpile time.
  final y = 10+x -> now this will be replaced at compile time.



