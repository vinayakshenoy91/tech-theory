- Java inner class or nested class is a class which is declared inside the class or interface.
- We use inner classes to logically group classes and interfaces in one place 
so that it can be more readable and maintainable.


- Use if you have class being accessed only in the parent class
- Does not make sense to refer it somewhere else except the context.



public class  Gearbox{

   public Gearbox(){
     Gear x = new Gear();
   }


   public class Gear{
     //This used here will refer to inner class. You can same named variable here if you have one in parent class
   }
}
  NJN
Gearbox mcLaren = new Gearbox();
Gearbox.Gear first = mcLaren.new Gear(1,2);

Advtges:
--------
1) Nested classes represent a special type of relationship that is it can access all the 
members (data members and methods) of outer class including private.

2) Nested classes are used to develop more readable and maintainable code because it logically group 
classes and interfaces in one place only.

3) Code Optimization: It requires less code to write.

Syntax of Inner class:
---------------------
class Java_Outer_class{  
 //code  
 class Java_Inner_class{  
  //code  
 }  
}  

Difference between nested class and inner class in Java:
----------------------------------------------------------
Inner class is a part of nested class. 
Non-static nested classes are known as inner classes.

Working:
-------
The java compiler creates two class files in case of inner class. The class file name of inner class is "Outer$Inner". 
If you want to instantiate inner class, you must have to create the instance of outer class. 
In such case, instance of inner class is created inside the instance of outer class.

Types of Nested classes:
------------------------
There are two types of nested classes non-static and static nested classes.The non-static nested classes 
are also known as inner classes.

1) Non-static nested class (inner class)
   - Member inner class:
     A non-static class that is created inside a class but outside a method is called member inner class.
     
     Ex:
     class TestMemberOuter1{  
        private int data=30;  
        class Inner{  
           void msg(){System.out.println("data is "+data);}  
        }  
        public static void main(String args[]){  
        TestMemberOuter1 obj=new TestMemberOuter1();  
        TestMemberOuter1.Inner in=obj.new Inner();  
         in.msg();  
     }  
    }  

    Compiled code:
    --------------
    import java.io.PrintStream;  
    class Outer$Inner  
    {  
      final Outer this$0;  
      Outer$Inner()  
       {   super();  
        this$0 = Outer.this;  
       }  
       void msg()  
       {  
        System.out.println((new StringBuilder()).append("data is ")  
                    .append(Outer.access$000(Outer.this)).toString());  
       }  
    } 


   - Anonymous inner class
     A class that have no name is known as anonymous inner class in java. It should be used if you have to 
     override method of class or interface. Java Anonymous inner class can be created by two ways:

     Class (may be abstract or concrete).
     Interface
 
 abstract class Person{  
  abstract void eat();  
}  
class TestAnonymousInner{  
 public static void main(String args[]){  
  Person p=new Person(){  
  void eat(){System.out.println("nice fruits");}  
  };  
  p.eat();  
 }  
}  

  1) A class is created but its name is decided by the compiler which extends the Person class and provides the implementation of the eat() method.
  2) An object of Anonymous class is created that is referred by p reference variable of Person type

  Compilted code:
  import java.io.PrintStream;  
static class TestAnonymousInner$1 extends Person  
{  
   TestAnonymousInner$1(){}  
   void eat()  
    {  
        System.out.println("nice fruits");  
    }  
} 

Using interface:
interface Eatable{  
 void eat();  
}  
class TestAnnonymousInner1{  
 public static void main(String args[]){  
 Eatable e=new Eatable(){  
  public void eat(){System.out.println("nice fruits");}  
 };  
 e.eat();  
 }  
}  

   - Local inner class

   public class localInner1{  
 private int data=30;//instance variable  
 void display(){  
  class Local{  
   void msg(){System.out.println(data);}  
  }  
  Local l=new Local();  
  l.msg();  
 }  
 public static void main(String args[]){  
  localInner1 obj=new localInner1();  
  obj.display();  
 }  
} 
Compiled code:
import java.io.PrintStream;  
class localInner1$Local  
{  
    final localInner1 this$0;  
    localInner1$Local()  
    {     
        super();  
        this$0 = Simple.this;  
    }  
    void msg()  
    {  
        System.out.println(localInner1.access$000(localInner1.this));  
    }  
}  

2) Static nested class

A static class i.e. created inside a class is called static nested class in java. It cannot access non-static data members and methods. It can be accessed by outer class name.

It can access static data members of outer class including private.
Static nested class cannot access non-static (instance) data member or method.

class TestOuter1{  
  static int data=30;  
  static class Inner{  
   void msg(){System.out.println("data is "+data);}  
  }  
  public static void main(String args[]){  
  TestOuter1.Inner obj=new TestOuter1.Inner();  
  obj.msg();  
  }  
}  

Compiled code:
import java.io.PrintStream;  
static class TestOuter1$Inner  
{  
TestOuter1$Inner(){}  
void msg(){  
System.out.println((new StringBuilder()).append("data is ")  
.append(TestOuter1.data).toString());  
}    
}  


Static nested example with static method:
-----------------------------------------
If you have the static member inside static nested class, you don't need to create instance of static nested class.

class TestOuter2{  
  static int data=30;  
  static class Inner{  
   static void msg(){System.out.println("data is "+data);}  
  }  
  public static void main(String args[]){  
  TestOuter2.Inner.msg();//no need to create the instance of static nested class  
  }  
}  


Java Nested Interface:
-----------------------

An interface i.e. declared within another interface or class is known as nested interface. The nested interfaces are 
used to group related interfaces so that they can be easy to maintain.
The nested interface must be referred by the outer interface or class. It can't be accessed directly.

Nested interface must be public if it is declared inside the interface but it can have any access modifier 
if declared within the class.

Nested interfaces are declared static implicitely.


interface interface_name{  
 ...  
 interface nested_interface_name{  
  ...  
 }  
}   

OR


class class_name{  
 ...  
 interface nested_interface_name{  
  ...  
 }  
}   


Ex: sun microsystem has provided a nested interface Entry. Entry is the subinterface of Map i.e. accessed by Map.Entry.

interface Showable{  
  void show();  
  interface Message{  
   void msg();  
  }  
}  


class TestNestedInterface1 implements Showable.Message{  
 public void msg(){System.out.println("Hello nested interface");}  
  
 public static void main(String args[]){  
  Showable.Message message=new TestNestedInterface1();//upcasting here  
  message.msg();  
 }  
}  

Comiled code:
The java compiler internally creates public and static interface as displayed below:.
public static interface Showable$Message  
{  
  public abstract void msg();  
}  


Ex:

class A{  
  interface Message{  
   void msg();  
  }  
}  
  
class TestNestedInterface2 implements A.Message{  
 public void msg(){System.out.println("Hello nested interface");}  
  
 public static void main(String args[]){  
  A.Message message=new TestNestedInterface2();//upcasting here  
  message.msg();  
 }  
} 




Can we define a class inside the interface?:
---------------------------------------------
Yes, If we define a class inside the interface, java compiler creates a static nested class. 

interface M{  
  class A{}  
}  