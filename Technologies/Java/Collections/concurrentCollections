Copy on write:
-------------
1) list and set:
- No locking for read.
- Write operation creates a new structure and replaces previous one.
- Thread that already has a reference on previous array will not see the modification.

//Work well when many reads and few writes.

CopyOnWriteArrayList
CopyOneWriteArraySet

Usecase: app init variables.


Queue[Interface for queue] and Deque[Interface for queue and stack]:
----------------------------------------------------------------------
- ArrayBlockingQueue -> a bounded blocking queue built on array.
- ConcurrentLinkedQueue -> An unbounded blocking queue.
- FIFO and LIFO


Queue methods:
boolean add(E e);//fail: IllegalArgumentException

boolean offer(E e); 
//Fail: return false
void put(E e)//block until a cell becomes available.
- Returns null for poll and peek
- Exception: remove() and element()

get and peek methods

Deque can accept elements at the head of queue:
- addFirst()
- offerFirst()
- pollLast() and pickLast()
- removeLast() and getLast()

Ans for BlockingDeque
- putFirst()
- take() -> will be blocked until element available
- takeLast()


Sync collections:
-----------------
List<Integer> nums = Collections.synchronizedList(new ArrayList<>()); //Intrinsic lock
- Instrinsic lock is not that effecient becase threads have to wait for each other even when 
we want to execute independent methods (operations)

Concurrent Collections:
-----------------------
