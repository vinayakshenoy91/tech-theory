- All factory patterns encapsulate object creation. 
When you directly instantiate an object, you are depending on its concrete class. 
The Factory Method Pattern encapsulates object creation by letting subclasses decide what objects to create. 

- The Factory Method Pattern defines an interface for creating an object, 
but lets subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.

- As with every factory, the Factory Method Pattern gives us a way to encapsulate the instantiations of concrete types

Essence of factory pattern:  Basically you are decoupling creator fromt he product.

I mean, the whole point of the Factory Method Pattern is that you’re using a subclass to do your creation for you. In that way, clients only need to know the abstract type they are using; the subclass worries about the concrete type. So, in other words, I keep clients decoupled from the concrete types.

use me to decouple your client code from the concrete classes you need to instantiate, or if you don’t know ahead of time all the concrete classes you are going to need. To use me, just subclass me and implement my factory method!


Notes:
- The Factory-Method pattern describes nothing more than a Template Method that creates an object whose concrete class isn’t known to the base class. 




Simple factory vs factory method:
--------------------------------
- The Factory Method Pattern is useful if you’ve only got one concrete creator because you are decoupling the implementation 
of the product from its use. If you add additional products or change a product’s implementation, 
it will not affect your Creator (because the Creator is not tightly coupled to any ConcreteProduct).

- Simple Factory as a one-shot deal, while with Factory Method you are creating a 
framework that lets the subclasses decide which implementation will be used.

- By subclassing the PizzaStore class, you decide what concrete products go into making the pizza that orderPizza() returns. 
Compare that with Simple Factory, which gives you a way to encapsulate object creation, 
but doesn’t give you the flexibility of Factory Method because there is no way to vary the products you’re creating.

Why?
------------
- In object-oriented programming, objects come into being at various times and for various reasons
- Core funda: If the code that uses the objects also is responsible for instantiating the objects (which is often the case), 
the code can become complicated. 
-  It has to keep track of many things: which objects to create, which construction parameters are needed, and how to use 
the object after construction—often 
even how to manage a pool of objects. This reduces cohesion, which is not what we want.
- Decouple how objects are created from how they interact with each other.
- Rule: Objects should either make other objects or use other objects, but never both

Core problem that factory addresses:
-------------------------------------
when you have code that makes use of lots of concrete classes, you’re looking for trouble because that code 
may have to be changed as new concrete classes are added. So, in other words, your code will 
not be “closed for modification.” To extend your code with new concrete types, you’ll have to reopen it.

Soln:
-----
- Encapsulate creation code from rest of the logic
- Factories handle details of object creation


//Simple factory impl:
-----------------------
public class SimplePizzaFactory{

 public Pizza createPizza(String type){
     
      Pizza pizza = null;

      //Pull all if else condition and concrete class instantiation here
      return pizza;
 }
}


public class PizzaStore{
  SimplePizzaFactory factory;

  public PizzaStore(SimplePizzaFactory factory){
      this.factory = factory;
  }
   
  public Pizza orderPizza(String type){
     Pizza pizza;
     pizza = factory.createPizza(type);
     pizza.bake();
     pizza.box();
     return pizza;
  }
}

//Factory method impl:
-----------------------


Things to remember due to this change:
---------------------------------------
- One thing to remember is that the SimplePizzaFactory may have many clients. We’ve only seen the orderPizza() method; however, 
there may be a PizzaShopMenu class that uses the factory to get pizzas for their current description and price. We might also 
have a HomeDelivery class that handles pizzas in a different way than our PizzaShop class but is also a client of the factory.
So, by encapsulating the pizza creating in one class, we now have only one place to make modifications when the implementation 
changes.

-  Defining a simple factory as a static method is a common technique and is often called a static factory. 
Why use a static method? Because you don’t need to instantiate an object to make use of the create method. 
]But it also has the disadvantage that you can’t subclass and change the behavior of the create method.



Factories are a major player here:

1.   Although there are often many “users” of an object, there is usually only one factory to build and/or manage it. Therefore, the more I can restrict my code modification to factories, the less work there will be for the main system—which is typically where the change of cost is highest.

2.   When a change is needed, usually it is either a change in which objects are required or it is a change in the way in which some objects are used. Factories help to limit maintenance to the users of the object or the builder of the object. I will have to modify both much less frequently.

3.   The knowledge that I can “worry about instantiation later” enables me to focus on the “pluggable” aspects of the design. It frees me to see opportunities for flexibility.


factory:
Define an interface for creating an object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.1



 In Java, the iterator method on collections is a Factory method. This method returns the right type of iterator for the collection being asked for it.

In the classic implementation of the Abstract Factory, I had an abstract class define the methods to create a family of objects. I derived a class for each different family I could have. Each of the methods defined in the abstract class and then overridden in the derived classes was following the Factory Method pattern.

Useful to bind parallel class hierarchies

Sometimes it is useful to create a hierarchical class structure that is parallel to an existing class structure, with the new hierarchy containing some delegated responsibilities. In this case, it is important for each object in the original hierarchy to be able to instantiate the proper object in the parallel hierarchy. A Factory Method can be used for this purpose. In the languages example mentioned previously, the Factory Method patterns bind the different collections with the different iterators associated with the collections,

The Factory Method Pattern: Key Features

Intent

Define an interface for creating an object, but let subclasses decide which class to instantiate. Defer instantiation to subclasses.

Problem

A class needs to instantiate a derivation of another class, but doesn’t know which one. Factory Method allows a derived class to make this decision.

Solution

A derived class makes the decision on which class to instantiate and how to instantiate it.

Participants and collaborators

Product is the interface for the type of object that the Factory Method creates. Creator is the interface that defines the Factory Method.

Consequences

Clients will need to subclass the Creator class to make a particular ConcreteProduct.

Implementation

Use a method in the abstract class that is abstract (pure virtual in C++). The abstract class’ code refers to this method when it needs to instantiate a contained object but does not know which particular object it needs.


The Factory Method pattern is commonly used when defining frameworks. This is because frameworks exist at an abstract level. Usually they do not know and should not be concerned about instantiating specific objects. They need to defer the decisions about specific objects to the users of the framework.


COre:

This boils down to a fundamental principle: Given any two entities A and B in a system, the relationship should be limited such that A uses B or A creates/manages B, but never both!



Benefits:
---------
By placing all my creation code in one object or method, I avoid duplication in my code and provide one place to 
perform maintenance. That also means clients depend only upon interfaces rather than the concrete classes required 
to instantiate objects. As I have learned in my studies, this allows me to program to an interface, not an implementation, 
and that makes my code more flexible and extensible in the future.



Dynamic instantiation ( dynamic-creation strategy ):
-----------------------------------------------------
Java, fortunately, provides you with an easy solution to this problem. The code in Listing 2-8 uses dynamic creation to manufacture a class of the correct type. The first few lines of openConnection() create a string that holds a class name representing the connection. The class name is formed by extracting the protocol (everything to the left of the colon) in the URL specification, converting the first character of the protocol to upper-case, prefixing a package name, and appending the string "URLConnection". For example, given new URL("xxx://www.holub.com"), the openConnection() method manufactures the class name com.holub.protocols.XxxURLConnection.

The openConnection() method then calls Class.forName() to create the class object for the class whose name you’ve just synthesized (an example of Singleton). Finally, openConnection() passes the class object a newInstance() message to instantiate an instance of the class (an example of Abstract Factory: Class has the role of Abstract Factory, the Class instance that represents the synthesized name is in the Concrete-Factory role, Object has the role of Abstract Product, and the created instance has the role of Concrete Product). Note that the created object must implement a known interface (URLConnection) for all this stuff to work.

Dynamic Instantiation

 1  import java.io.IOException;
 2
 3  public class URL
 4  {   private String spec;
 5
 6      public URL( String spec )
 7      {   this.spec = spec;
 8      }
 9
10      public URLConnection openConnection() throws IOException
11      {
12          // Assemble the class name by prefixing a package
13          // and appending URLConnection to the protocol.
14          // The first character of the protocol is mapped to
15          // uppercase.
16
17          StringBuffer name   = new StringBuffer( "com.holub.protocols." );
18          String       prefix = spec.substring( 0, spec.indexOf(":"));
19
20          name.append( Character.toUpperCase(prefix.charAt(0)) );
21          name.append( prefix.substring(1) );
22          name.append( "URLConnection" );
23
24          String className = name.toString();
25
26          // Manufacture an object of the class whose name we just
27          // assembled:
28
29          try
30          {   Class factory = Class.forName( className );
31              return (URLConnection)( factory.newInstance() );
32          }
33          catch( Exception e )
34          {
35              // Throw an IOException whose message is the one
36              // associated with the exception that got us here.
37
38              IOException toThrow = new IOException();
39              toThrow.initCause( e );
40              throw toThrow;
41          }
42      }
43  }
44
45  class HttpURLConnection implements URLConnection
46  {   //...
47  }
48
49  class FtpURLConnection implements URLConnection
50  {   //...
51  }
52
53  interface URLConnection
54  {   //...
55  }
