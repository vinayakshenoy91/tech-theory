Professor eric brewer:
---------------------
In the presence of network partition, a distributed Db cannot guarantee both consistency and 
availability and has to choose only one of them


1.Consistency: A distributed system that returns the most current data no matter which node the request was made to is 
considered to guarantee consistency. In layman’s terms, if a write or update request to any node in the system is 
replicated to other nodes in the system, before the read request, it’s a consistent system. 
So, the bottom line is that every read will return the most recent write. The system will not return stale data but the 
most recently updated data. In order to achieve consistency, the system has to update all the relevant nodes at each 
request, before allowing any reads from the system on that particular resource.
Can all nodes see identical data at all times.
Every read request receives either the most recent write or an error.

 
2.Availability: It is the ability of a node to respond to requests if the node hasn’t failed. Availability allows for 
failed nodes. However, if the node hasn’t failed and doesn’t respond to a legitimate request, it is considered to not be 
available. In order to achieve availability, the system needs to replicate data between different nodes.
Can all nodes be read from and written to at all times.
Every request receives a non-error response, without the guarantee that it contains the most recent write.

 
3.Partition Tolerance: It is the guarantee of a system to respond to requests even when the system is partially 
down. No failure less than a complete failure of the system should allow the system to respond incorrectly. So, if 
the connections between some nodes in the system are lost, the system is partition tolerant, if and only if the system 
as a whole is still consistent and available.
Will nodes function normally, even when the cluster breaks.
A system continues to operate despite an arbitrary number of messages being lost or delayed by the network 
between different computers.

If your application requires linearizability, and some replicas are disconnected from the other replicas due to a network problem, then some replicas cannot process requests while they are disconnected: they must either wait until the network problem is fixed, or return an error (either way, they become unavailable).

If your application does not require linearizability, then it can be written in a way that each replica can process requests independently, even if it is disconnected from other replicas (e.g., multi-leader). In this case, the application can remain available in the face of a network problem, but its behavior is not linearizable.



https://pages.cs.wisc.edu/~zuyu/files/fallacies.pdf 
It elucidates common mistakes an engineer makes with architecture distributed systems. 
These fallacies are the following:
1.	
Network is reliable.

 
2.	
Latency is zero.

 
3.	
Bandwidth is infinite.

 
4.	
Network is secure.

 
5.	
Topology doesn’t change.

 
6.	
There is one administrator.

 
7.	
Transport cost is zero.

 
8.	
Network is homogenous.

 
CP and AP are most used
CP -> Consistent data across a horizontally scaled cluster, even with network problems.
Couchbase , MongoDB
-> Items is 1 left in stock


AP -> Availability and Partition Tolerance
Always service requests, across multiple DCeven with network problems, data eventually consistent.
Couchbase XDCR , HBASE, Cassandra
If consistency does not matter (Ex: likes in a FB feed)
Available database may have a stale value.

CA -> Consistency and Availability -? Vertically scaled system
RDBMS. We cannot have a distributed DB having this.
Network partitions may happen at any time so we cannot guarantee both availability and consistency for a distributed database.


