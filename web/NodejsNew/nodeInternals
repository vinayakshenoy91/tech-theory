Asynchronous I/O
A specific case of asynchronous programming relates to a very interesting feature provided by Node.js: asynchronous I/O.

This feature is highly relevant to the internal architecture of Node.js. As I’ve said, Node.js doesn’t provide multi-threading; it actually works with a single thread that runs an event loop.

Essentially, the Event Loop works on phases; for every tick of the loop, it goes through a new phase. For every phase, it keeps a FIFO queue of callbacks, and it executes as many callbacks in that phase as it can (there is a limit to how many callbacks can be called on every tick).

There is a common misconception that the event loops handles all asynchronous functions with threads from Libuv (the library V8 uses to handle asynchronism). But it’s not exactly true; these threads are only used in special cases when there is no other way, because modern OS and other systems, such as Databases, already provide asynchronous interfaces, so the engine will try to use them, and if there is no async alternative, it’ll resort to the thread pool.

The aforementioned phases are:
1.	
Timers: Here is where setTimeout and setInterval are evaluated.

 
2.	
Callbacks: Here is where system-specific callbacks are executed.

 
3.	
Poll: This is where I/O-related callbacks get executed, as long as there are any. Once all callbacks have been executed (or the system’s limit is reached), if there is nothing else to execute, then the engine will wait for new callbacks to be registered in this phase to execute them.

 
4.	
Check: Here is where setImmediate is evaluated.

 
5.	
Close events: Here is where the callbacks registered for the ‘close’ events are executed.

 
If you wanted to, there is a very interesting way to look into this and test it on your own. Simply by using the following code, you’ll see how the execution is done internally:

const request = require("request"),
        fibonacci = require("fibonacci"),
        fs = require("fs");
process.nextTick(() => {
        process.stdout.write("NT #1\n");
});
fs.readFile("./index.js",  (err, data) => {
        process.stdout.write("1: I/O Polling...\n");
});
request.get("http://google.com", (err, res, body) => {
        process.stdout.write("2: System polling...\n");
})
setImmediate(() => {
        process.stdout.write("3: Set Immediate phase...\n");
});
setTimeout(() => {
        process.stdout.write("4: Timers...\n");
}, 0);
process.stdout.write("5: Fibonacci(20): " + fibonacci.iterate(20).number + " -Callback\n");
process.nextTick(() => {
        process.stdout.write("NT #2\n");
})
Listing 3-11Example showing the different phases for the event loop
The result from executing the code from Listing 3-11 is the following (note that this is in my computer, with Node version 8.1.3; results might vary on your side, but they should be similar nonetheless):
1.	
5: Fibonacci(20): 6765 callback

 
2.	
NT #1

 
3.	
NT #2

 
4.	
4: Timers…

 
5.	
3: Set Immediate phase…

 
6.	
1: I/O Polling…

 
7.	
2: System polling…

 
From these results, we can extrapolate the following behavior :
1.	
The first thing to get executed (and resolved) is the current thread, which means the line of the fibonacci call. The rest of the lines were executed, but they have not yet resolved, because they’re all different forms of asynchronous behavior.

 
2.	
After the current phase is over, the event loop tries to move to the next one, but first it needs to call the nextTick method, which is executed on a separate queue. This means that no matter what the current phase is, it’ll resolve all callbacks you’ve defined and then move to the next phase.

 
3.	
By this time, the Poll phase has probably run, and it has verified that no callback has been registered for it yet (because the file is still being read and the HTTP Request is still being made), so it continues to the timers and check phases.

 
4.	
In this case, depending on the performance of your system, either one of them can run. The point here is that since we’ve setup the timeout for setTimeout to 0, the execution of that callback and the one for setImmediate is non-deterministic. In other words, you won’t be able to predict their order of execution.6

 
5.	
Finally, after the timers have run, the only thing missing is to wait on the Poll phase until the I/O operations end, and given the nature of them, reading the file will end first, leaving the HTTP request to be resolved in the last place.


