1) Inline styling:
-------------------
Elements adjusted using:
1) useState
2) setState() on event
3)style(state) => Pass that prop to style function and return appropriate styles.



Media query using JS:
---------------------
const {width}= useWindowDimensions();


function useWindowDimensions(){
   const [windowDimensions, setWindow] = React.useState({
       with: window.innerWidth
   })

   useEffect(()=>{

       cosnt handleWindowResize = ()=>{
           setWindow({width:innerWidth});
       }

       window.addEventListener('resize',handleResize)

       return ()=>{
          window.removeEventListener('resize',handleResize)
       }
   })

   return windowDimensions;

}

Theming:
---------

const theme ={
    header:{

    }, 
    input:{
         color:"#fff",
         textAlign: 'center'
    }
}

<ThemeProvider>
<App/>
</ThemeProvider>

In theme provider export file use:

export const ThemeContext = React.createContext({theme:{}})

export function  ThemeProvider(props){
    return <ThemeContext.Provider value={{theme: props.theme ||{}}}>
        {props.children}
        </ThemeContext.Provider>
}

//In respective file, use: 
const theme =  useContext(ThemeContext);


2) CSS in JS libraries: colocate styles + power of css
-----------------------
- Styled components
- emotion
- glamour
- radium

import styled, {keyframes} from 'styled-components';

const jitter = keyframes `
0% {transition: scaleY(0.9);}
100% { transition: scaleY(1); }
`
const Button = styled.button`
animation: ${jitter} 350ms ease-out infinite;
`

cosnt Button = styled.button`
color: white;
background: ${props => props.secondary?'gray':'blue'};
`

background: ${props => props.theme.color?'gray':'blue'}; //No extra thing, just wrap app with ThemeProvider


3) CSS stylesheets:
--------------------
BEM

.block__element--modifier

4) CSS modules:
----------------
- No sharing constants
- react-css-themer library

css stylesheet -> Module bundler -> export object

import * as css from './component-styles.module.css'

console.log(css); //This will print all the things in the css.

css.button => Refer this way

- Isolated in a module, no bem worries

.bar {


}

.barActive{
    composes: bar;
}

Potential project config for css in React:
-------------------------------------------
- POSTCSS pre-processor is a processor that adds ability to css like nested selectors.
Webpack configs:
----------------
npm install webpack webpack-cli @babel/core @babel/preset-react babel-loader css-loader postcss-loader style-loader
postcss-nesting //B asically required for css nesting not supported by vanila css

babel.config.js
module.exports = {
    presets:['@babel/preset-react']
}

postcss.config.js

module.exports={
    plugins:{
        'postcss-nesting':{}
    }
}


webpack.config.js

const path = require('path');
module.exports = {
   entry:'./src/index.js',
   output:{
       path: path.resolve(__dirname,'public'),
       filename:'bundle.js',
   }
   module:{
      rules:[
          {
              test:/\.js$/,
              exclude:/node_modules/,
              use:{
                  loader: 'babel-loader'
              }
          },
           {
              test:/\.css$/,
              use:['style-loader','css-loader','postcss-loader']
          }
      ]
   }
}


In package json,

build: webpack
