- It is an object with properties and methods
- Represents eventual completion or failing of an async operation.
- Provides a value.


var asyncFunction = function(){
    return new Promise(function(resolve, reject){
    
    })
}


Promise.all():
-------------

const promise1 =  new Promise((resolve,reject) => {
  setTimeout(resolve, 500, 'first value');
});
const promise2 =  new Promise((resolve,reject) => {
  setTimeout(resolve, 1000, 'second value');
});

Promise
  .all([promise1, promise2])
  .then(data => {
    const[promise1data, promise2data] = data;
    console.log(promise1data, promise2data);
  });
// after 1000 ms
// first value second value


Promise.race():
----------------
Promise.race() on the other hand returns a promise that resolves or rejects as soon as one of the promises in the 
iterable resolves or rejects with the value from that promise.



PROPAGATES FROM ONE PROMISE TO ANOTEHR:

var promise = func1();

promise

.then(function(result1) {
    console.log(result1);
    return func2();
})

.then(function(result2) {
    console.log(result2);
    return result2%10;
})

.then(function(result3) {
    console.log(result3);
});

function func1() {
    return new Promise(function(resolve, reject) {
        setTimeout(function() {
            resolve("Hello");
        }, 1000);
    });
}

function func2() {
    return new Promise(function(resolve, reject) {
        setTimeout(function() {
            resolve(50);
        }, 1000);
    });
} 

