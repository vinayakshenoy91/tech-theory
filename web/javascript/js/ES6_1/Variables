- With the introduction of let and const in ES6, we can now better define our variables depending on our needs. 

Var:
-----
Variables declared with the var keyword are function scoped, 
which means that if we declare them inside a for loop (which is a block scope), they will be available even outside of it.
when we did the same with the variable declared with var, it leaked outside of the block scope and also changed it in the outer scope.

let:
-----
Variables declared with the let (and const) keyword are block scoped, meaning that they will be available only inside of the block where they are declared and its sub-blocks.

const:
------
variables declared with const are also block scoped, but they differ in the fact that their value can’t change through re-assignment and can’t be re-declared.


Note:
------
var can be accessed before they are defined, but we can’t access their value. let and const can’t be accessed before we define them.
Despite what you may read on other sources, both var and let(and const) are subject to hoisting, which means that they are processed before any code is executed and lifted up to the top of their scope (whether it’s global or block).
The main differences lie in the fact that var can still be accessed before they are defined. This causes the value to be undefined. 
While on the other hand, let lets the variables sit in a temporal dead zone until they are declared. And this causes an 
error when accessed before initialization, which makes it easier to debug code rather than having an undefined as the result.