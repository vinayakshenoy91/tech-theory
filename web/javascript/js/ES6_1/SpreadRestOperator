Spread syntax allows an iterable such as an array expression or string to be expanded in places where zero 
or more arguments (for function calls) or elements (for array literals) are expected, or an object expression to 
be expanded in places where zero or more key-value pairs (for object literals) are expected.


Combine arrays:
const veggie = ["tomato","cucumber","beans"];
const meat = ["pork","beef","chicken"];

const menu = [...veggie, "pasta", ...meat];
console.log(menu);

Copy arrays:
const veggie = ["tomato","cucumber","beans"];
const newVeggie = [...veggie];

ES5 way of creating new array:
const newVeggie = [].concat(veggie);
veggie.push("peas");
console.log(veggie);



Spread function:
-----------------

// OLD WAY
function doStuff (x, y, z) {
  console.log(x + y + z);
 }
var args = [0, 1, 2];

// Call the function, passing args
doStuff.apply(null, args);

// USE THE SPREAD SYNTAX

doStuff(...args);
// 3 (0+1+2);
console.log(args);
// Array [ 0, 1, 2 ]


Spread in Object Literals (ES 2018 / ES9) #
This feature is not part of ES6, but as we are already discussing this topic, itâ€™s worth mentioning that ES2018 introduced the spread operator for objects.


let person = {
  name : "Alberto",
  surname: "Montalesi",
  age: 25,
}

let clone = {...person};
console.log(clone);
// Object { name: "Alberto", surname: "Montalesi", age: 25 }


//Array destructuring:
function removeFirstTwo(list) {
  const [, , ...arr] = list; 
  return arr;
}   


The Rest parameter #
---------------------
I tcollects value in the form of array and used as  function arguments.
The rest syntax looks exactly the same as the spread- 3 dots .... But it is quite the opposite of it. 
Spread expands an array, while rest condenses multiple elements into a single one.

const runners = ["Tom", "Paul", "Mark", "Luke"];
const [first,second,...losers] = runners;

console.log(...losers);
// Mark Lukes


Rest follows the same syntax as the spread syntax, i.e., placing three dots ... before what we choose to copy. 
However, the difference lies in the purpose. 
Where spread is used to create copies of arrays/objects, rest is used to collect all the remaining values into an array. 


Ex:

function display(a, b, ...rest) {
   console.log(a, b, rest);
}

display(9,10,11,12,13,14,15,16);


//Get nth item of array:

function returnNthCat(n){
const state = {
   cats : [
      {catId : 1 , name : "tom"},
      {catId : 2 , name : "tiggy"},
      {catId : 3 , name : "leo"},
      {catId : 4 , name : "tommy"}
   ],
   curpage : 3
}

const { cats: { [n]:{name:thisCatName}}} = state;

return thisCatName
}
console.log(returnNthCat(1))
console.log(returnNthCat(0))
console.log(returnNthCat(3))
console.log(returnNthCat(2))  


Short circuit evaluation: const {name:n,age:a} = point || {}

