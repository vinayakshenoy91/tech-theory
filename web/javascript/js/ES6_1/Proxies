The Proxy object is used to define custom behavior for fundamental 
operations (e.g. property lookup, assignment, enumeration, function invocation, etc).


Creating proxy:

var x = new Proxy(target,handler);

our target can be anything, from an object, to a function, to another Proxy
a handler is an object which will define the behavior of our Proxy when an operation is performed on it

    // our object
    const dog = { breed: "German Shephard", age: 5}

    // our Proxy
    const dogProxy = new Proxy(dog, {
      get(target,breed){
        return target[breed].toUpperCase();
      },
      set(target, breed, value){
        console.log("changing breed to...");
        target[breed] = value;
      }
    });

    console.log(dogProxy.breed);
    // "GERMAN SHEPHARD"
    console.log(dogProxy.breed = "Labrador")
    // changing breed to...
    // "Labrador"
    console.log(dogProxy.breed);
    // "LABRADOR"s

Proxies can be very useful. For example, we can use them to validate data.

const validateAge = {
  set: function(object,property,value){
    if(property === 'age'){
      if(value < 18){
        throw new Error('you are too young!');
      } else {
        // default behaviour
        object[property] = value;
        return true
      }
    }
  }
}

const user =  new Proxy({},validateAge)

user.age = 17
// Uncaught Error: you are too young!


Reusing setter and getter:
-------------------------

const dog  = {
  name: 'pup',
  age: 7
}
const handler = {
  get: (target, property) => {
    property in target ? console.log(target[property]) : console.log('property not found');
  },
  set: (target, property, value) => {
    target[property] = value;
    console.log(target[property])
  }
}

const dogProxy = new Proxy(dog, handler);

dogProxy.name;
// pup
dogProxy.age;
// 7
dogProxy.breed;
// property not found
dogProxy.name = 'Max';
// Max
dogProxy.age = 8;
// 8
