"use strict"
var obj1 = {};
Object.defineProperty(obj1, 'x', { value: 42, writable: false });
obj1.x = 9;

Using strict enforces strict mode, which means stricter parsing and error handling of the JavaScript code. It allows you to catch 
errors in an erroneous code, whereas in a normal case, JavaScript might not show an error for the same piece of code.

(function test() {
    'use strict';
	var fn = function () {
		return this * 2;
	};

	console.log(fn.apply(undefined)); //NAN
	console.log(fn.apply(null));//0
	console.log(fn.apply(1));//2    
})();


strict mode:
------------
"use strict"
- Error is thrown if writable false property of object is tried to be written

- Using strict enforces strict mode, which means stricter parsing and error handling of the JavaScript code. It allows you to catch errors 
in an erroneous code, whereas in a normal case, 
JavaScript might not show an error for the same piece of code. 

- However, when strict mode is used in a function, it changes the value of this from the global object window to undefined.
Otherwise it refers window object.

When we call a function with apply, the value of this is set to some custom value that is the first parameter to the apply method.

If this value is of a primitive type, it is boxed into an object, and set as the value of this.

(function test() {
    'use strict';
	var fn = function () {
		return this * 2;
	};

	console.log(fn.apply(undefined));
	console.log(fn.apply(null));
	console.log(fn.apply(1));
})();

undefined*2 should return NaN since the result will not be a number.
null >=0; since null times any number is zero, null*2 should return 0.
1*2 should return 2.

Object.Freeze and Seal:
------------------------
One way is to freeze an object using the Object.freeze() method. 
It prevents the existing properties from getting modified when all properties and methods become read-only.

Similarly, we can seal the object using the Object.seal() method. It prevents the addition and deletion of properties.
However, it does not stop properties from getting modified; that is done by Object.freeze().


"use strict"; //This is required to throw error

var person = {
	name: "Nishant"
};

Object.freeze(person); 
Object.seal(person);

function func(){
	try{
		person.name = "xyz"
		console.log(person.name); 
	}catch(e){
		console.log("Cannot change name")
	}
    try{
		person.age = 30;
		console.log(person.age); 
	}
	catch(e){
		console.log("Cannot add property age")
	}
	try{
		delete person.name
		console.log(person.name); 
	}
	catch(e){
		console.log("Cannot delete person")
	}

}
func()