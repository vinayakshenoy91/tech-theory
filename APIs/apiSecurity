- HTTPS everywhere, if within the cluster use shared secret with HTTP


Basic Authentication
Authorization: Basic dXNlcjpwYXNzd29yZA== //Username: password

OAuth:
------
-------

The second benefit of OAuth is that it allows API providers’ users to grant selective permission. 
Each application has different requirements of what data it needs from an API provider. 
The OAuth framework allows API providers to grant access to one or more resources.


Token Generation
With OAuth, applications use an access token to call APIs on behalf of a user. The generation of this token happens in a multistep flow. Before an application can start the OAuth flow, it needs to be registered with the API provider. During registration, developers provide a redirect URL—an application URL to which the API provider can redirect the authorizing user. The API provider issues a client ID and client secret that are unique to the application. The client ID can be public, whereas the client secret should be kept confidential.

After an application is registered, the application can generate an access token by following these steps:

The application directs the user to the API provider for authorization.

Applications typically first show authorizing users a button labeled something like “Continue with Facebook.” When users click the button, they are redirected to the API provider’s authorization URL. While redirecting, the application sends the client ID, the permissions requested (i.e., access to the user’s public profile or list of friends) in a parameter called scope, an optional unique string state parameter, and (optionally) a redirect URL.

The API provider seeks the user’s authorization.

As shown in Figure 3-2, the API provider should clearly indicate what permissions the application is requesting. If the user denies the authorization, they are redirected back to the application’s redirect URL with an access_denied error. If the user approves the request, they are redirected back to the application with an authorization code.

The application exchanges an authorization code for an access token.

Upon successful authorization, applications can exchange the authorization code via an access token. The application will need to send the client ID, client secret, authorization code, and redirect URL to the API provider to receive an access token. The authorization code provided can be used only once; this helps in preventing replay attacks. Applications can then use this access token for accessing protected resources on behalf of the user.

Scopes
OAuth scopes are used to limit an application’s access to user data. For instance, an application might only need to identify a user. Rather than requesting access to all of the user’s data, the application can request access to only the user’s profile information by means of a granular OAuth scope. During authorization, the API provider will display all the requested scopes to the user. This way, users will know what permissions they are granting to an application.

Defining scopes for an API is an interesting problem. Many APIs offer simple read, write, and combo read/write scopes. For instance, the Twitter API offers three levels of permissions via scopes:

Read only

Read and write

Read, write, and access direct messages

Often, API providers open up their APIs without thinking too much about scopes. Only when the API begins to be widely adopted or is being abused do they start realizing the need for additional scopes. At that time, introducing new scopes becomes complicated. It’s important to think about your goals and use cases before you decide which scopes you might want to support. Granular scopes help in ensuring that applications have only the permissions they need. At the same time, too many scopes can create confusion for users and developers.

Beyond typical read/write scopes, here are some additional considerations for defining your scopes:

A minimal scope
You may want to offer a scope that that provides only basic user information, like a name and profile picture (and nothing else). Applications building sign-in flows can use this to identify a user. Most API providers, like Slack, Facebook, and Heroku, offer such a scope.

Isolate scopes for protecting sensitive information
It’s important to protect sensitive information on your service with a separate scope. When an application requests this sensitive scope, users should be shown a clear warning indicating what is being shared with the application. Heroku introduced “read-protected” and “write-protected” scopes to manage access to resources, like an app’s configuration variables, which contain secrets like database connection strings.

Similarly, GitHub introduced a different scope to read information about private repositories. Twitter also added a scope that would grant access to direct messages when it realized many apps were abusing the read scope by accessing them even when they didn’t need to.

Differentiate scopes for different kinds of resources
Many large API providers that have multiple types of services and features choose to split scopes by functionality. For example, the Slack API has different scopes for reading and writing messages, pins, stars, reactions, channels, users, and other resources. Similarly, GitHub has different scopes for accessing different resources, like the repositories, managing organization, public keys, notifications, and gists. This means that an application requesting access to only a user’s repositories will not be granted access to that user’s gists.



Token and Scope Validation
After developers have received an access token, they can begin making API requests using this access by setting the HTTP Authorization header, as shown in Example 3-1.

Example 3-1. Request to Slack API with access token
POST /api/chat.postMessage
HOST slack.com
Content-Type: application/json
Authorization: Bearer xoxp-16501860-a24afg234
{
 "channel":"C0GEV71UG",
 "text":"This a message text",
 "attachments":[{"text":"attachment text"}]
 }
When receiving these requests, there are two things that API providers’ servers need to verify. The first is that the access token is valid. You need to match the given access token with the granted access tokens in your database. The second is that the access token has the required scope for the action that the request is supposed to perform. If either check fails, the server should return an error.

Apart from errors, it’s also useful to return more metadata about which scopes were needed and which scopes were provided. Many APIs, like those for GitHub and Slack, return these two headers:

X-OAuth-Scopes lists the scopes for  which a token has been authorized.

X-Accepted-OAuth-Scopes lists the scopes that the action requires.

Example 3-2 presents sample OAuth headers returned by the GitHub API.

Example 3-2. OAuth scope headers in the GitHub API response
curl -H "Authorization: token OAUTH-TOKEN"\
  https://api.github.com/users/saurabhsahni -I
HTTP/1.1 200 OK
X-OAuth-Scopes: repo, user
X-Accepted-OAuth-Scopes: user
In case a token is missing the required scope, to make troubleshooting easier for developers, it’s useful to return more verbose errors indicating the provided scope along with the scope that the action requires. For example, as shown in Example 3-3, the Slack API returns such verbose errors.

Example 3-3. Response from the Slack API when a valid token is missing the required scope
{
    "ok": false,
    "error": "missing_scope",
    "needed": "chat:write:user",
    "provided": "identify,bot,users:read",
}
Token Expiry and Refresh Tokens
The OAuth protocol allows limiting the validity of the access token issued in the OAuth flow. Many APIs choose to issue tokens that expire in a few hours or days. This way, if a token is compromised, the impact can be contained. If you issue access tokens with limited validity, you need to provide a way for applications to obtain a new token, typically without intervention from the end user. One way to do this is by issuing refresh tokens.

A refresh token is a special type of token used to obtain a new access token when the current access token expires. Applications need to provide the client ID, client secret, and refresh token to generate a new access token. Refresh tokens are a standard way of renewing expired access tokens. API providers, like Google, Salesforce, Asana, Stripe, and Amazon, support refresh tokens.

Even if your access tokens do not expire, it can be a good idea to share refresh tokens. This way, in case of a compromise, an app developer can rotate an existing access token and generate a new one. This is why the Stripe API supports refresh tokens, even though the access tokens it grants do not expire.


Short-lived access tokens are more secure for the following reasons:

If an access token is compromised, it will work only until it expires.

If a refresh token is compromised, it will be useless without the client secret, which is typically not stored along with access tokens and refresh tokens.

If both the refresh token and the client secret are compromised and the attacker generates a new access token, the compromise can potentially be detected because typically refresh tokens are one-time use only and only one party can use the API (per refresh token) at a time.

Listing and Revoking Authorizations
For various reasons, a user might want to know which applications can access their data and might want to revoke access to one or more of them. To support this use case, most API providers typically offer a page that

As well as providing the ability to revoke authorizations in the UI, it’s a good idea to provide APIs that give users the ability to revoke access tokens and refresh tokens. This way, a developer who wants to revoke a token, due to a compromise or for other reasons, can do so programmatically.


OAuth Best Practices
Here’s a list of best practices that you might like to consider when building your own authorization server using OAuth:

state parameter support
The state parameter is an optional authentication parameter that you can use to help mitigate CSRF attacks. API providers implementing OAuth should support this parameter. The state parameter is a string generated by the developer for authenticating the user and is passed to the authorization endpoint. The API provider then passes this string back to the redirect URL along with the authorization code in exchange for the access token.

Short-lived authorization codes
Generated authorization codes should expire within a few minutes and should be one-time use only. This way, an attacker cannot use them to generate tokens along with the authorized application.

One-time-use refresh tokens
If you are building an application that stores very sensitive data, consider restricting your refresh tokens to one-time use only. You can issue a new one when an access token is renewed. Although single-use refresh tokens add complexity for developers, they do help in detecting compromises of refresh tokens and client secrets. That said, it is a good idea to allow applications to use refresh tokens for a small window of time so that they can retry if there was a network failure or another issue. The Fitbit API allows a refresh token to be reused for up to two minutes.

Ability to reset the client secret
You should provide developers with the ability to reset the client secret. This way, if client secrets and refresh tokens are compromised, applications can stop an attacker with a leaked client secret from renewing access tokens.

OAuth scopes for sensitive information
Protect sensitive information on your service by using dedicated OAuth scopes. This way, your users will not grant access to sensitive information to every application that might not need it.

HTTPS endpoints
Because access tokens are sent as part of every HTTP request, it’s important that your API endpoints require HTTPS. This prevents man-in-the-middle attacks.

Verify redirect URL
When the optional redirect URL is provided, during an authorization request, ensure that it matches to one of the registered URLs for the application. If not, the API server must show an error without showing the authorization prompt. This ensures that any returned secrets are not exposed to an attacker.

Disallow rendering the authorization screen in iframes
Use the X-Frame-Options header to deny rendering an authorization page in an iframe. This prevents clickjacking attacks, where a malicious site tricks a user into clicking an element that seems harmless but actually leads to clicking a button like “Authorize” on another site.

Keep users informed
You should notify users over a medium like email when a new authorization is granted. This way, users can be alerted if the authorization was unintended.

Prohibit misleading application names
Do not allow apps to use names that might mislead users into thinking that an outside application was created by your company. One way to enforce this is by denying apps permission to use your company name in OAuth application names. 


WebHooks Security
------------------

As discussed in Chapter 2, a WebHook is simply a URL where API providers send a POST request when something happens. For instance, Stripe sends notifications about new payments to WebHook URLs. Similarly, whenever you open a Pull Request in GitHub, GitHub sends a POST request to the developer’s configured WebHook URL(s).

Securing WebHooks is slightly different from securing web APIs. Because the WebHook URLs are generally publicly accessible on the internet, it’s important for the developers to be able to ensure the POST request actually came from the stated sender. In the absence of such a verification, an attacker can forge a request to the WebHook URL. Although there are no standards like OAuth that are used to secure WebHooks, there are some common patterns that API providers follow.

Verification Tokens
A verification token is a secret shared between applications and API providers. As shown in Figure 3-6, API providers like Slack issue a unique verification token to every application. With each dispatched WebHook request, Slack sends a verification token. Applications match the token received as part of the request with the recorded value. If they do not match, the application ignores the request. This way, applications can verify that a request actually came from Slack.

Verification tokens are simple to implement, from both the API provider’s and the developer’s perspective. A simple comparison check can ensure the request came from the desired sender. However, verification tokens also offer limited security because they are sent in plain text with every request. If a verification token is leaked or compromised, an attacker can forge WebHook requests.

Request Signing and WebHook Signatures
Signatures are among the most common ways API providers choose to secure WebHooks. WebHook payloads are typically signed by computing a hash-based message authentication code (HMAC) of a shared secret plus the request body, and the signature is sent as part of a request header. Applications then verify the authenticity of the request by computing the same HMAC and comparing it to the value set in the header. API providers, like Stripe and GitHub, use this mechanism to secure WebHooks.

PREVENTING REPLAY ATTACKS
A replay attack is a form of attack in which an attacker retransmits a WebHook with a valid signature. To mitigate such attacks (as shown in the t=1492774577 part of Example 3-4), API providers like Stripe include a request timestamp in the message payload. If the timestamp is too old, applications can reject the request.

Mutual Transport Layer Security
When you connect to an https:// URL with the Transport Layer Security (TLS) Handshake Protocol, the server sends its certificate to the client. The client then verifies the server’s certificate before trusting the response.

With mutual TLS, the server and client both authenticate each other. The server sends the client a certificate request. The client (WebHook provider, in this case) then responds with a certificate. The server verifies the client’s certificate before trusting the request.

Although request signing is implemented within application logic, you can implement Mutual TLS at a lower level. This way, developers can enforce high security while opening a firewall for an API without requiring anything of the application developers. This is especially useful for enterprise developers.

Mutual TLS is typically used in business-to-business applications. API providers like DocuSign support Mutual TLS.

Thin Payloads and API Retrieval
One of the fundamental problems with WebHook signatures and verification tokens is that both of these methods rely on developers to do the right thing. They do not enforce authentication. Different application developers can follow different security standards, and it’s difficult to determine whether they are verifying WebHook requests.

A more secure option is to send limited information in the payload indicating to the application that something has changed. To retrieve the full event, the application would need to make a subsequent request to the web API. The key benefit of this approach is that even if applications do not verify the WebHook, they will receive the full event only after making regular authenticated requests to a web API. 

Google uses this method for securing WebHooks. Gmail’s API allows applications to subscribe to watch for changes in an inbox using WebHooks. When something changes, Gmail sends a WebHook request, including the email address and an ID for the change (base64-encoded in the data field, as shown in Example 3-5). Applications can call Gmail’s history.list web API to retrieve the full change details.

WebHook Security Best Practices
Enforcing security standards on WebHooks is complicated. Here are some security best practices that you should keep in mind when building support for WebHooks:

Avoid sending sensitive information as part of WebHooks. Never send passwords or secrets as part of the WebHook payloads. Use authenticated API requests to send any sensitive information.

If you are signing WebHooks, include a timestamp in the payload. This way, applications can implement checks for replay attacks.

Support regeneration of shared secrets (used as a verification token or one for signing the WebHook). In case of a compromised secret, an application developer can rotate this secret and ensure authenticity of future requests.

Provide developers with SDKs and sample code that verify the authenticity of WebHook requests and reject invalid requests.

RULE: OAUTH MAY BE USED TO PROTECT RESOURCES
OAuth (Open Authorization) is an open standard that provides secure authorization using a consistent approach for all clients. It is best known for its role in allowing users to share their private resources, such as photos or contact lists, stored on one web site with another site without having to disclose their confidential username or password.

OAuth is described as an “open standard” because the protocol specification is not owned or controlled by any corporation, but rather, is managed by the OAuth Working Group within the IETF. The WG is comprised of individuals from Google, Microsoft, Facebook, Twitter, Yahoo, and other leading Internet companies.

OAuth is an HTTP-based authorization protocol that enables the protection of resources. The OAuth protocol’s flow is summarized in the steps below:

A client obtains the artifacts needed to interact with a REST API’s protected resources. Note that with respect to the character of these artifacts and how they are obtained, there are some significant differences between versions of the OAuth protocol specification.

Using the artifacts that it obtained in Step 1, the client requests an interaction with a REST API’s protected resource.

The REST API, or an intermediary acting on its behalf, validates the client request’s OAuth-based authorization information. Note that there are some significant differences in the validation process as detailed by the OAuth 1.0[40] and 2.0[41] specifications.

If the validation check succeeds, the REST API allows the client’s interaction with the protected resource to proceed.

Architecturally, the OAuth protocol helps a REST API address security concerns in a manner that is complementary to the resource-centric and stateless nature of its interactions with clients.



For example, the simplest type of authentication is HTTP basic authentication, where credentials are provided by the caller in the HTTP header and validated against a Lightweight Directory Access Protocol (LDAP) server. More complex authentication capabilities can be based, for example, on client certificates and/or tokens as opposed to a username/password.


Authorization, however, refers to having the ability to verify that a (valid) caller has adequate rights to access a 
given resource (for example, a specific API endpoint). Given that authentication precedes authorization, major protocols, 
most notably OAuth 2.0, define flows as how to handle the authentication and subsequent authorization enforcement for a 
given caller. OAuth is a good example but not the only one; other protocols, such as OpenID and SAML, should also be supported 
by this capability.




It’s important to highlight that both SAML and OpenID Connect are meant to be used as an Authentication protocol rather than API Authorization. For example, both protocols are commonly used to implement Single-Sign On (SSO) across different applications. However, once a user has been authenticated, authorization protocols such as OAuth 2.0, require a type of token, commonly refer to as an access token, to be obtained and passed around by API consumers when accessing protected resources. Furthermore, as an access token contains authorization grants, API servers (aka resource servers) can use it to enforce rightful access to resources.



access control lists (ACLs) in networking, this capability refers to having the ability to define access rules at transport level, for example, defining an access rule that only allows calls to an API that come from a specific IP range, or the opposite: allowing all callers but those coming from a specific range.


This capability can be useful, for example, in scenarios where it's required to restrict access to an API based on a given region (for example, only calls originating from IPs belonging to EU countries are allowed). Because there are ways to get around IP restrictions, this capability should not be used as the only means to control access to an API.


API key validation
This refers to having the ability to validate the presence of a valid application API key in 
API calls (for example, as part of the HTTP header or URI). Application keys are commonly issued via self-service capabilities in the API developer portal for registered consuming applications.

This capability can be extremely useful when wanting to understand who the consumers of a given API call are. 
This, in turn, is critical in change control as it, for example, enables us to gain a better understanding of who the 
impacted audience for a given API change may be.

CORS:
-----
User agents commonly apply same-origin restrictions when making requests to different URLs. These restrictions can prevent client-side applications (for example, an AngularJS application running on a browser) from calling API endpoints from domains different to the one used to access the application itself.

Cross-Origin Resource Sharing (CORS) is a W3C standard for allowing user agents (for example, a browser) to enable different-origin requests to take place in a secure way, therefore allowing user agents to securely get by restrictions.


This capability refers to having the ability to apply cross-domain checks to, for example, enable CORS on certain API endpoints.



OWASP:- Top 10


API composition differs from orchestration in that there is no (or should not be any) business logic implemented in the composition, for example, if/then/switch conditionals, for/while loops, or complex data transformations. If business processing logic is required, then this should be implemented as a service in the business capability block.




Rate limits
This allows for the implementation of hard limits in the number of calls that can be made to a given API resource. Limits could be applied to specific applications, users, or just overall without distinction. This capability is very useful to protect against unexpected peaks (for example, by setting a limit to the maximum number that the system can handle) or even to protect against denial of service attacks.

Throttling
This capability offers the ability to limit or regulate the maximum throughput 
that can be handled at a given timeframe. Being able to statically and/or dynamically control 
the throughput (for example, 100 transactions per second) ensures that downstream services won't 
have to handle a larger number of requests than they physically can. It also helps to prevent 
a given API from overusing the capacity of the underlying infrastructure, thus degrading the performance of all APIs.



Identity federation
When the requirement is to allow seamless access to users whose accounts reside in an outside security domain to that of the application (meaning that synchronizing identities using LDAP, for example, is not an option), other protocols come into play, most notably SAML, which allows trust to be established with an external identity provider. Once the trust is configured (in short through a process of exchanging security certificates), then it is possible for users whose accounts reside in the identity provider to also be granted access to the main application in question.


