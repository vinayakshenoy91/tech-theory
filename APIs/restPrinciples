Principles are:
---------------
1) Client–server: The principle states, “Servers and clients may also be replaced and developed 
independently, as long as the interface between them is not altered.”

2) Stateless: The principle states, “The client–server communication is further constrained 
by no client context being stored on the server between requests.” 

3) Caching: The principle states, “Well-managed caching partially or completely eliminates 
some client–server interactions, further improving scalability and performance.” 

4) Layered system: The principle states, “A client cannot ordinarily tell whether it is connected directly to the 
end server, or to an intermediary along the way. Intermediary servers may improve system scalability by enabling 
load-balancing and by providing shared caches.”

5) Code on demand: The principle states, “Servers are able temporarily to extend or customize the functionality 
of a client by the transfer of executable code.”

The Web makes heavy use of code-on-demand, a constraint which enables web servers to temporarily transfer executable programs, such as scripts or plug-ins, to clients. Code-on-demand tends to establish a technology coupling between web servers and their clients, since the client must be able to understand and execute the code that it downloads on-demand from the server. For this reason, code-on-demand is the only constraint of the Web’s architectural style that is considered optional. Web browser-hosted technologies like Java applets, JavaScript, and Flash exemplify the code-on-demand constraint.



6) Uniform Interface: The principle states, “The uniform interface between clients and servers, discussed below,
 simplifies and decouples the architecture, which enables each part to evolve independently.
 HATEOAS (Hypermedia as the Engine of Application State) is a constraint of the REST application architecture. 
 With the use of HATEOAS we create a hypermedia-driven site. 
 This site simplifies navigation of the REST interfaces dynamically by including hypermedia links with the responses.

 The interactions between the Web’s components—meaning its clients, servers, and network-based intermediaries—depend on the uniformity of their interfaces. If any of the components stray from the established standards, then the Web’s communication system breaks down.

Web components interoperate consistently within the uniform interface’s four constraints, which Fielding identified as:

Identification of resources

Manipulation of resources through representations

Self-descriptive messages

Hypermedia as the engine of application state (HATEOAS)

The four interface constraints are summarized in the following subsections.

Identification of resources
Each distinct Web-based concept is known as a resource and may be addressed by a unique identifier, such as a URI. For example, a particular home page URI, like http://www.oreilly.com, uniquely identifies the concept of a specific website’s root resource.

Manipulation of resources through representations
Clients manipulate representations of resources. The same exact resource can be represented to different clients in different ways. For example, a document might be represented as HTML to a web browser, and as JSON to an automated program. The key idea here is that the representation is a way to interact with the resource but it is not the resource itself. This conceptual distinction allows the resource to be represented in different ways and formats without ever changing its identifier.

Self-descriptive messages
A resource’s desired state can be represented within a client’s request message. A resource’s current state may be represented within the response message that comes back from a server. As an example, a wiki page editor client may use a request message to transfer a representation that suggests a page update (new state) for a server-managed web page (resource). It is up to the server to accept or deny the client’s request.

The self-descriptive messages may include metadata to convey additional details regarding the resource state, the representation format and size, and the message itself. An HTTP message provides headers to organize the various types of metadata into uniform fields.

Hypermedia as the engine of application state (HATEOAS)
A resource’s state representation includes links to related resources. Links are the threads that weave the Web together by allowing users to traverse information and applications in a meaningful and directed manner. The presence, or absence, of a link on a page is an important part of the resource’s current state.


