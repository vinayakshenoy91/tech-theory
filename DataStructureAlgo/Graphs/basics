- Set of vertices(nodes) that are connected to each other via edges in the form of a network.
- Connects to multiple nodes
- G(V,E)


- Tree is an undirected graph where any two vertics are connected by exactly one path
- Forest is an undirected grpah all of whose connected components are trees (disjoint union of trees)
- DAG -> Finite girected graph with no directed cycles.


There are two common types of graphs:
--------------------------------------
1) Undirected graph: G(V,E)
--------------------
- edge(u,v) is identical to edge(v,u)
- Edges may have weight
- degree(v) = number of edges going through it
- sum of degree = 2 * |E|
- Max number of edges = [|v|*(|v|-1)] /2

2)Directed graph:
-----------------
indegree(v) = number of edges coming in to that vertex
outdegree(v) = number of edges going out of that vertex
sum of indegrees = |E|
sum of outdegrees = |E|
Max number of edges = |v|*|v-1|


Terminologies in a graph:
-------------------------

1) Degree of a vertex: Number of edges connected to a vertex.

2) Indegree of a vertex: Number of edges coming into vertex.

3) Outdegree of a vertex: Number of outgoign edges connected to a vertex.

4) Parallel edges: Two or more edges that are incident to the same vertices.

5) Self loop: Same endpoints of an edge.

6) Bridges in a graph: It is an edge which when removed increases the number of components.


Graph representation:
----------------------

1) Adjacency matrix:
---------------------
- VxV matrix
- For undirected graph, it is a symnetric matrix
- For directed graph, you mark 1 for outgoing edges and incoming it is 0.
- Requires : Theta(vxv) space
- Find all vertices adjacent to u and degree of vertex, both take theta(v) time
- Add or remove an edge: theta(1) time
- Add or remove a vertex: theta(v^2) time

pros:
----
Space effecient with dense graphs byt requires O(vxv) memory
Edge weight lookup is O(1)

cons:
----
Iterating over all edges takes O(E^2)



2)Adjacency list: Ineffecient with dense graph and space effecient while dealing with sparse graphs.
-----------------
cons:
----
- edge weight lookup is slow (O(E))

pros:
-----
- Iterating over all edges is effecient

- An array of Linked Lists is used to store edges between two vertices.
- It is an array of list and list representations are: a) dynamic sized arrays (they have cache friendliness) b) Linked list
- space theta(V+E) for directed and theta(V+2*E) for undirected.
- Add edge: Theta(1)
- Remove edge: Theta(v)
- Find degree of u : theta(1)
- Find all adjacent of u : theta(degree(u))
- Check if there is an edge from u to v -> (O(v))
- You can find nodes that are adjacent to a given vertex in O(1) time complexity.


Note: Using DLL with tail is that the insertAtTheEnd() operation has O(1) time complexity.


Applications of graphs:
------------------------
- Dijkstra shortest path algo can find shortest path between two locations
- arbitrage opportunities on the forex can be detected with the help of bellman ford algo (detecting negative cycles)
- Shortest path algo used in photo editing software
- OSPF is a routing protocal to navigate packets in web
- Google spider crawling algo.
- Job scheduling algo 
- Maven gradle using DAG
- Quadratic optimisation problem: Max flow problem, circulation problem, vehicle routing problem
- Strongly connected components social network , recommendation systems, analyse food chains

BFS:
----
- Visit one node exactly once
- Algo visits neighbours and then the neighbours of these new vertices until all nodes are visited
- Running time complexity is O(V+E)
- Memory complexity is not good as lot of references need to be stored.
- Dijkstra algo using BFS can construct a shortest path if all edge weights are = 1

BFS applications:
-----------------
- AI and ML
- Important in max flow which uses Edmonds-Karp algo uses BFS for finding augmenting paths
- Cheyen's algo in GC: Helps to maintain active refernces on the heap memory ( it uses BFS to detect all the references on the heap)
- Serialize and deserialize tree like structure. It allows the tree to be reconstructed in an effecient manner.


