//Use pascal's triangle

class DynamicProgramming{
    
    static int p = 1000000007;
    
    public static int min(int a, int b) 
    { 
        return (a<b)? a: b;  
    }
    
    public static int nCrModp(int n, int r){
        
        // The array C is going to store last row of 
        // pascal triangle at the end. And last entry 
        // of last row is nCr 
        int C[] = new int[r+1];
        Arrays.fill(C, 0);
    
        C[0] = 1; // Top row of Pascal Triangle 
    
        // One by constructs remaining rows of Pascal 
        // Triangle from top to bottom 
        for (int i = 1; i <= n; i++) 
        { 
          // Fill entries of current row using previous 
          // row values 
          for (int j = min(i, r); j > 0; j--) 
    
            // nCj = (n-1)Cj + (n-1)C(j-1); 
            C[j] = (C[j]%p + C[j-1]%p)%p; 
        } 
        return C[r]; 
      
    }
    
}


Logic:
-------
The value of nCr%p is generally needed for large values of n when nCr cannot fit in a variable, and causes overflow. So computing nCr and then using modular operator is not a good idea as there will be overflow even for slightly larger values of n and r. 

The idea is to compute nCr using below formula

   C(n, r) = C(n-1, r-1) + C(n-1, r)
   C(n, 0) = C(n, n) = 1
Extension of above formula for modular arithmetic:
We can use distributive property of modulor operator to find nCr % p using above formula.

   C(n, r)%p = [ C(n-1, r-1)%p + C(n-1, r)%p ] % p
   C(n, 0) = C(n, n) = 1
So, let's take an example of 4C3. Pascal's triangle for 4C3 is as:
             1
           1    1
         1    2   1
     1      3    3    1
  1     4     6     4     1

Rows in Pascal's triangle decides the value of given nCr. So, try to fill the entries of current row using the previous row values (nCj = (n-1)Cj + (n-1)C(j-1) ). Try to think of doing this using 1D array.

