Three problemas where LL can work well:
- Round Robin Scheduling
- We have multiple sorted sequences and we need to merge them frequently
- Given a sequence of items, Whenever we see an item x in the sequence, we need to replace it 
with 5 instance of another.


About Linkedlist:
------------------
- Elements do not need to be contiguous

Some important applications of Linked Lists include:
----------------------------------------------------
Implementing HashMaps, File System and Adjacency Lists
Dynamic memory allocation: We use linked lists of free blocks
Performing arithmetic operations on long integers
Maintaining a directory of names

Operations	Descriptions
insertAtEnd(data)	Inserts an element at the end of the linked list
insertAtHead(data)	Inserts an element at the start/head of the linked list
delete(data)	Deletes an element from the linked list
deleteAtHead()	Deletes the first element of the list
deleteAtEnd()	Deletes the last element of the list
Search(data)	Searches an element from the linked list
isEmpty()	Returns True if the linked list is empty, otherwise returns False


Doubly linked list operation:
-----------------------------
- Browser ops

Circular linked list:
---------------------
- used for queue impl [Inserting at beginning or end is O(1)]
- Round robin

Note: Linked list impl in java is doubly linked list

Advantages:
----------
- Dynamic DS
- It can allocate needed memory in runtime
- Effecient to manipulate first element
- Used to impl stacks or queues

Disadvtge:
----------
- Waste memory because of references
- Single link list difficult to navigate backwards
- Each node has sequential access


Single linked list
---------------------
- Impl list , queue and deque
- Not thread safe

Where to use linked list?
--------------------------
- Remove heavy apps
Low level memory mgmt(malloc, free) -> Doubly linked list is used
- Syslinux -> memory management [Refer this blog for memeory mgmt]
- Multiple windows (alt+tab)
- Photo viewer
- Block chains and bit coins -> blocks are cryptographically linked together

Insertion operation:
--------------------
List are:

Insert at Head
Insert at End
Insert After

Deletion imp:
-------------
1) Deletion at head:

This operation simply deletes a node from the head of the list, which means that it always deletes the first element of the list. 
This type of deletion is used when your list is ordered, 
and you want to implement a priority queueâ€“via a linked list-- to keep track of all the elements.

2) Deletion by value



. A loop in a linked list occurs if any node contains a reference to any previous node, then a loop will be formed. An illustration is also provided for your understanding.