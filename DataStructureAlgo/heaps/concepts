- Heaps are advanced data structures based on Binary Trees, which is why they are commonly known as Binary Heaps.
- A Binary Heap is a complete Binary Tree which satisfies the Heap ordering property.
- Heaps are implemented through Arrays, where each element of the array corresponds to a node in the binary tree and 
the value inside the node is called a “key”.
- Heaps can also be implemented using trees with a node class and pointers, but it’s usually easier and more space efficient 
to use an array.
- They are not at all sorted; in fact, the only key feature of a Heap is that the largest or smallest element is 
always placed at the top (parent node) depending on what kind of Heap we are using.



All the nodes are ordered according to the rules listed below:
- A Heap tree must be a Complete Binary Tree.
- The nodes must be ordered according to the Heap Property.

- Moreover, this Data Structure Heap has nothing to do with the dynamic memory allocations on a Heap in various languages

1) Complete binary tree:

The new elements are inserted from left to right. When you add a new node, 
you must make sure that the left child of that intermediate parent node is filled. If it’s not, 
add a node at the left and insert the new element there.

A Heap uses Complete Binary Trees to avoid holes in the array

2) Heap Property :
----------------
A heap is built, based on the Heap property, by comparing the parent node key with its child node keys. 
This comparison is done based on the heap property. The two heap structures that we are going to cover in this chapter are:

Min Heap
Max Heap

Max Heap Property: 
- This property states that all the parent node keys must be greater than or equal to their child node keys. So the root node, 
in this case, will always contain the largest element present in the Heap.

Min Heap Property:
- In Min Heap, all the parent node keys are less than or equal to their child node keys. This goes without saying 
that the rule will apply to all children of the node. 
So the root node, in this case, will always contain the smallest element present in the Heap


Heap uses:
----------
1) Order statistics: Heaps are primarily used for efficiently finding the smallest or largest element in an array.

2) Priority Queues: Priority queues can be efficiently implemented using Binary Heap because it supports insert(), delete(), 
extractmax(), and decreaseKey() operations in O(logn)O(logn) time. Binomoial Heaps and Fibonacci Heaps are variations of Binary 
Heaps. These variations also perform union() in O(logn)O(logn) time, which is an O(n)O(n) operation in a Binary Heap. 
Heap-implemented priority queues are used in Graph algorithms like Prim’s Algorithm and Dijkstra’s algorithm.

3) Sorting: HeapSort uses the Heap data structure to sort values in exactly the same way as TreeSort used a Binary Search Tree.
Each insert() and delete() operation is O(logN). At the very worst - the heap does not always have all N values in it, so the 
complexity is certainly no greater than O(NlogN). This is better than the worst-case for TreeSort, which–because you might build 
a degenerate Binary Search Tree-- is O(N*N).HeapSort is especially useful for sorting arrays because Heaps, unlike almost all 
other types of trees - are usually implemented in arrays, not as linked data structures!

Heap representation using arrays:
---------------------------------
Heaps can be implemented using Arrays. The contents of a heap with n nodes are stored in such a way that 
all the parent nodes occur in the first half of array (n/2), while the leaves are present at the last n/2 positions. 
So the last parent will be at the n/2th position.

The node at the kth position will have its children placed as follows:

The Left child at 2k+1
The Right child at 2k+2.