Learning about Docker
I assume that Docker and the concept of containers need no in-depth presentation. 
Docker the concept of containers as a lightweight alternative to virtual machines very popular in 2013. 
Containers are actually processed in a Linux host that uses Linux namespaces to provide between containers of 
global system resources, such as users, processes, filesystems, and networking. Linux control groups (also known as cgroups) 
are used to limit the amount of CPU and memory that a container is allowed to consume. Compared to a virtual machine that 
uses a hypervisor to run a complete copy of an operating system in each virtual machine, the overhead in a container is a 
fraction of the overhead in a virtual machine. This leads to much faster startup times and significantly lower overhead 
in terms of CPU and memory usage. The isolation that's provided for a container is, however, not considered to be as secure 
as the isolation that's provided for a virtual machine. With the release of Windows Server 2016, Microsoft supports the use 
of Docker in Windows servers.


Docker made the concept of containers as a lightweight alternative to virtual machines very popular in 2013. Containers 
are actually processed in a Linux host that uses Linux namespaces to provide isolation between containers of global system 
resources, such as users, processes, filesystems, and networking. Linux Control Groups (also knows as cgroups) are used to 
limit the amount of CPU and memory that a container is allowed to consume. Compared to a virtual machine that uses a hypervisor
 to run a complete copy of an operating system in each virtual machine, the overhead in a container is a fraction of the overhead
  in a virtual machine. This leads to much faster startup times and significantly lower overhead in terms of CPU and memory usage. 
  The isolation that's provided for a container, however, is not considered to be as secure as the isolation that's provided for a 
  virtual machine. With the release of Windows Server 2016 and Windows 10 Pro (1607 Anniversary Update), Microsoft supports the usage 
  of Docker on Windows as well.



Sample docker file:
--------------------
FROM openjdk:12.0.2

MAINTAINER Magnus Larsson <magnus.larsson.ml@gmail.com>

EXPOSE 8080
ADD ./build/libs/*.jar app.jar
ENTRYPOINT ["java","-jar","/app.jar"]

Docker compose:
--------------
If we want to start and stop many containers with one command, Docker Compose is the perfect tool. 
Docker Compose uses a YAML file to describe the containers to be managed.

product:
 build: microservices/product-service

recommendation:
 build: microservices/recommendation-service

review:
  build: microservices/review-service

composite:
  build: microservices/product-composite-service
  ports:
    - "8080:8080"

Let me explain the preceding source code a little: 

The build directive is used to specify which Dockerfile to use for each microservice. Docker Compose will use it to build a Docker image and then launch a Docker container based on that Docker image. 
The ports directive for the composite service is used to expose port 8080 on the server where Docker runs. On a developer's machine, this means that the port of the composite service can be reached simply by using localhost:8080!


All the containers in the YAML files can be managed with simple commands such as the following:

docker-compose up -d: Starts all containers. -d means that the containers run in the background, not locking the Terminal from where the command was executed.
docker-compose down: Stops and removes all containers.
docker-compose logs -f --tail=0: Prints out log messages from all containers. -f means that the command will not complete, and instead waits for new log messages. --tail=0 means that we don't want to see any previous log messages, only new ones.


