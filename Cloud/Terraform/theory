- Terraform code is written in the HashiCorp Configuration Language (HCL) in files with the extension .tf
- It is declarative language.
- The first step to using Terraform is typically to configure the provider(s) you want to use. 


1) Create an empty folder andput a file in it called main.tf that contains the following contents:

provider "aws" {  
    region = "us-east-2"
}

- The general syntax for creating a resource in Terraform is:

resource "<PROVIDER>_<TYPE>" "<NAME>" {
  [CONFIG ...]
}

2)  To deploy a single (virtual) server in AWS, known as an EC2 Instance, use the aws_instance resource in main.tf as follows:
[ami obtainer from market place or created using packer]

resource "aws_instance" "example" {
  ami           = "ami-0c55b159cbfafe1f0"
  instance_type = "t2.micro"
}

3) In a terminal, go into the folder where you created main.tf and run the terraform init command:
terraform init

[Why to run this command? 
The terraform binary contains the basic functionality for Terraform, but it does not come with the code 
for any of the providers (e.g., the AWS provider, Azure provider, GCP provider, etc.), so when you’re first starting to use 
Terraform, you need to run terraform init to tell Terraform to scan the code, figure out which providers you’re using, and download 
the code for them. By default, the provider 
code will be downloaded into a .terraform folder, which is Terraform’s scratch directory (you may want to add it to .gitignore). ]


4) command: terraform plan

The plan command lets you see what Terraform will do before actually making any changes. This is a great way to sanity check 
your code before unleashing it onto the world. The output of the plan command is similar to the output of the diff command that 
is part of Unix, Linux, and git: anything with a plus sign (+) will be created, 
anything with a minus sign (–) will be deleted, and anything with a tilde sign (~) will be modified in place. 

5) To actually create the Instance, run the terraform apply command:

terraform apply


6) Store in git:

git init
git add main.tf
git commit -m "Initial commit"
git remote add origin git@github.com:<YOUR_USERNAME>/<YOUR_REPO_NAME>.git
git push origin master

Put below in .gitignore:

.terraform
*.tfstate
*.tfstate.backup


Example: Runnign a webserver
-------

#!/bin/bash
echo "Hello, World" > index.html
nohup busybox httpd -f -p 8080 &


Terraform expressions:
-----------------------
An expression in Terraform is anything that returns a value. You’ve already seen the simplest type of expressions, 
literals, such as strings (e.g., "ami-0c55b159cbfafe1f0") and numbers (e.g., 5).

One particularly useful type of expression is a "reference", which allows you to access values from other parts of your code. 
To access the ID of the security group resource, 
you are going to need to use a resource attribute reference, which uses the following syntax:

Syntax: <PROVIDER>_<TYPE>.<NAME>.<ATTRIBUTE>

When you add a reference from one resource to another, you create an implicit dependency. Terraform parses these dependencies, 
builds a dependency graph from them, and uses that to automatically determine in which order it should create resources. 
For example, if you were deploying this code from scratch, Terraform would know that it needs to create the security group 
before the EC2 Instance, because the EC2 Instance references the ID of the security group. 

Terraform Graph:
----------------
You can even get Terraform to show you the dependency graph by running the graph command:

$ terraform graph

The output is in a graph description language called DOT, which you can turn into an image, similar to the dependency graph 
shown in Figure 2-7, by using a desktop app such as Graphviz or webapp like GraphvizOnline.

Terraform's immutability showcase:
-----------------------------------
The -/+ in the plan output means “replace”; look for the text “forces replacement” in the plan output to figure out what is 
forcing Terraform to do a replacement. Many of the arguments on the aws_instance resource will force a replacement if changed, 
which means that the original EC2 Instance will be terminated and a completely new Instance will be created. This is an example of 
the immutable infrastructure paradigm discussed in “Server Templating Tools”. 
It’s worth mentioning that although the web server is being replaced, any users of that web server would experience downtime;

Variables in Terraform for reusability:
----------------------------------------

variable "NAME" {
  [CONFIG ...]
}

Ex:

variable "number_example" {
  description = "An example of a number variable in Terraform"
  type        = number
  default     = 42
}

variable "list_example" {
  description = "An example of a list in Terraform"
  type        = list
  default     = ["a", "b", "c"]
}

- Type constrint variables;
variable "list_numeric_example" {
  description = "An example of a numeric list in Terraform"
  type        = list(number)
  default     = [1, 2, 3]
}

- Map that requires all value to be strings: 

variable "map_example" {
  description = "An example of a map in Terraform"
  type        = map(string)

  default = {
    key1 = "value1"
    key2 = "value2"
    key3 = "value3"
  }
}

variable "object_example" {
  description = "An example of a structural type in Terraform"
  type        = object({
    name    = string
    age     = number
    tags    = list(string)
    enabled = bool
  })

  default = {
    name    = "value1"
    age     = 42
    tags    = ["a", "b", "c"]
    enabled = true
  }
}

- Making  server port as variable and provising it via cli:

variable "server_port" {
  description = "The port the server will use for HTTP requests"
  type        = number
}

terraform plan -var "server_port=8080"

or

You could also set the variable via an environment variable named TF_VAR_<name>, where <name> 
is the name of the variable you’re trying to set:

$ export TF_VAR_server_port=8080
$ terraform plan

Defining output variables:
--------------------------
output "<NAME>" {
  value = <VALUE>
  [CONFIG ...]
}

The NAME is the name of the output variable, and VALUE can be any Terraform expression that you would like to output. 
The CONFIG can contain two additional parameters, both optional:

description
It’s always a good idea to use this parameter to document what type of data is contained in the output variable.

sensitive
Set this parameter to true to instruct Terraform not to log this output at the end of terraform apply. This is useful 
if the output variable contains sensitive material or secrets such as passwords or private keys.

For example, instead of having to manually poke around the EC2 console to find the IP address of your server, 
you can provide the IP address as an output variable:

Ex: 
output "public_ip" {
  value       = aws_instance.example.public_ip
  description = "The public IP address of the web server"
}

And you can run terraform output <OUTPUT_NAME> to see the value of a specific output called <OUTPUT_NAME>:

$ terraform output public_ip
54.174.13.5
This is particularly handy for scripting. For example, you could create a deployment script that runs terraform 
apply to deploy the web server, uses terraform output public_ip to grab its public IP, and runs curl on the IP as 
a quick smoke test to validate that the deployment worked.


Lifecycle setting:
------------------
Normally, when replacing a resource, Terraform deletes the old resource first and then creates its replacement, but because your ASG now has a reference to the old resource, Terraform won’t be able to delete it.

To solve this problem, you can use a lifecycle setting. Every Terraform resource supports several lifecycle settings 
that configure how that resource is created, updated, and/or deleted. A particularly useful lifecycle setting is 
create_before_destroy. If you set create_before_destroy to true, Terraform will invert the order in which it replaces resources, 
creating the replacement resource first (including updating any references that were pointing at the old resource to point to the 
replacement) 
and then deleting the old resource. 

Data source:
------------

A data source represents a piece of read-only information that is fetched from the provider (in this case, AWS) every 
time you run Terraform. Adding a data source to your Terraform configurations does not create anything new; it’s just a 
way to query the provider’s APIs for data and to make that data available to the rest of your Terraform code. 
Each Terraform provider exposes a variety of data sources. For example, the AWS provider includes data sources to 
look up VPC data, subnet data, AMI IDs, IP address ranges, the current user’s identity, and much more.

The syntax for using a data source is very similar to the syntax of a resource:

data "<PROVIDER>_<TYPE>" "<NAME>" {
  [CONFIG ...]
}

Ex:
#With the aws_vpc data source, the only filter you need is default = true, 
which directs Terraform to look up the Default VPC in your AWS account.
data "aws_vpc" "default" {
  default = true
}

To get the data out of a data source, you use the following attribute reference syntax:
data.<PROVIDER>_<TYPE>.<NAME>.<ATTRIBUTE>


Destroy terraform resources:
------------------------------
$ terraform destroy