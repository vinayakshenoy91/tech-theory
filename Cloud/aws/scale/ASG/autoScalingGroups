- Automatically register instances to LB


Scaling options:
----------------
1) Manual 

2) Dynamic
- Scaling policy -> New policy
- In cloudwatch check if alarm to track cpu utilisation. This will automatically be created by ASG

3) Scheduled
- Schedule action 

4) Predictive
- In services -> AWS autoscaling policy

ASG will have following attributes:
----------------------------------
- Launch config
  -> Has AMI + instance type
  -> EC2 user data
  -> EBS volume
  -> Security groups
  -> SSh key pair
- Min/max desired size
- Network/Subnet info
- LB information
- Scaling policies

Auto scaling rules: Manual or dynamic
-------------------
- Target avg CPU usage
- Avg network in 
- Avg network out
- Number of requests on ELB per instance
- Custom metric created where you send number of users connected to EC2 to cloudwatch using PutMetrics API
- Also set based on schedule
- Use Launch config or templates
- IAM roles assigned to ASG will be also attached to EC2
- ASG is free.
- ASG can terminate instance marked as unhealthy by LB


Setting up asg:
---------------
- Create a launch template[Mix of spot and on-demand]  specifying the AMIs.Create paraemter 
subsets[For reuse and inheritance].

Use T2 unlimited burst feature.

Scaling policies:
-------------------
1) Target tracking scaling : Ex: my avg asg cpu should stay: 40%
2) Simple/Step scaling: Cloudwatch alarm triggered, add 2 unit. <30% , remove one instance
3) Schedule actions


ASG default termination policy:
--------------------------------
- Find the AZ which has the most number of instances.
- if there are multiple instance in AZ to choose from, delete the one with oldest launch config.

- you can define lifecycle hooks while  [READ]
adding instance -> pending -> pending:wait -> pending:proceed -> InService
terminating instance -> Terminating -> wait-> proceed -> Terminated
