- Master nodes in HA
- Etcd ensembles HA
- API server
- KubeDNS
- Scheduler
- cloud controlelr
- controller manager

- API call audited using clod trail
- Auth is IAM and ahtorization through RBAC
- Cloud formation template to manage your cluster
- Customise AMI for your nodes
- LB, EBS, EFS
- ECR (Container registries)
- Networking is handled with a per pod IP address with attached ENI
- CLI integrtion

- You can have ML cluster as EKS support GPU instance.


CLI tools:
----------
- aws cli [python & python pip]
- eksctl
- kubectl

pip3 install --user awscli

vi .aws/credentials
aws_access_key_id=
aws_secret_access_key=
region=us-east-1
output=json

aws --version

install eksctl:
```bash
curl --silent --location "https://github.com/weaveworks/eksctl/releases/download/latest_release/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp  

sudo mv /tmp/eksctl /usr/local/bin
```

This utility will use the same _credentials_ file as we explored for the AWS cli, located under '~/.aws/credentials'

## Test
```eksctl version```


# kubectl - the commandline K8s tool

## install _kubectl

* kubectl
  * on RH based Linux:  
  
  ```bash
  sudo dnf install kubernetes-clientcat <<EOF > /etc/yum.repos.d/kubernetes.repo
  [kubernetes]
  name=Kubernetes
  baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
  enabled=1
  gpgcheck=1
  repo_gpgcheck=1
  gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
  EOF
  yum install -y kubectl
  ```

  * on Debian/Ubuntu:
  
  ```bash
  sudo apt-get update && sudo apt-get install -y apt-transport-https
  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
  echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
  
  sudo apt-get update
  sudo apt-get install -y kubectl
  ```

  * on Windows, open a terminal emulator, preferrably MobaXterm:
  
  ```bash
  curl -k -# -o kubectl.exe https://amazon-eks.s3-us-west-2.amazonaws.com/1.10.3/2018-07-26/bin/windows/amd64/kubectl.exe
  chmod +x kubectl.exe
  mkdir $HOME/bin
  mv kubectl.exe $HOME/bin
  echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
  source .bashrc
  ```

## check kubectl

* Linux:  
```kubectl version --short --client```
* Windows:  
```kubectl.exe version --short --client```



VISIT eksctl.io for cluster creation doc



# yaml for cluster:

apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: EKS-course-cluster
  region: us-east-1

nodeGroups:
  - name: ng-1
    instanceType: t2.small
    desiredCapacity: 3
    ssh: # use existing EC2 key
      publicKeyName: eks-
      

# cluster creation:

# use eksctl to create EKS cluster

display available options and properties:

```bash
eksctl create cluster --help
```

## creation

create cluster by using yaml config file:

```bash
eksctl create cluster -f eks-course.yaml
```

## post-install check

eksctl also creates the config file for _kubectl_. This means we can immediately fire up a check like:

```
kubectl get nodes
```


Note:
-----
- eksctl will also create VPC and two subnets for diff AZ. Spcify if VPC and subnet already created in yaml


