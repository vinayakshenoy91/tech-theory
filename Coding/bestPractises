Class Org:
---------
- Variables static folowed by instance
- static initializers
- static nested classes
- static methods
- instance initializers
- constructors
- instance nested classes
- methods

- Only if precision is important then use BigDecimal

- If you use concatenate more string then use string builder. If not concatenating string in single line
and using string builder always gives same perf.

- if is Logger.isLoggable(Level.INFO)


Best practise wrto classes and interfaces:
------------------------------------------



Notes:
------
Methods are doing multiple different things.
We use low-level primitive operations (array accesses, arithmetic operations, etc.).
We lack human-readable text, like comments and good method and variable naming.

- A function should either call methods on an object or pass the object as an argument, but not both.
- If you have an if, it should be the first thing in the function.


//Moving condition to the respective classs
function handleInput(input: Input) {
  if (input.isLeft())
    moveHorizontal(-1);
  else if (input.isRight())
    moveHorizontal(1);
  else if (input.isUp())
    moveVertical(-1);
  else if (input.isDown())
    moveVertical(1);
}

1) 
enum TrafficLight {
  RED, YELLOW, GREEN
}
const CYCLE = [TrafficLight.RED, TrafficLight.GREEN, TrafficLight.YELLOW];
function updateCarForLight(current: TrafficLight) {
  if (current === TrafficLight.RED)
    car.stop();
  else
    car.drive();
}

interface TrafficLight2 {
  isRed(): boolean;
  isYellow(): boolean;
  isGreen(): boolean;
}

class Red implements TrafficLight2 {
  isRed() { return true; }
  isYellow() { return false; }
  isGreen() { return false; }
}
class Yellow implements TrafficLight2 {
  isRed() { return false; }
  isYellow() { return true; }
  isGreen() { return false; }
}
class Green implements TrafficLight2 {
  isRed() { return false; }
  isYellow() { return false; }
  isGreen() { return true; }
}

enum RawTrafficLight {
  RED, YELLOW, GREEN
}


function updateCarForLight(
  current: TrafficLight2)
{
  if (current.isRed())
    car.stop();
  else 
    car.drive();
}

const CYCLE = [
  new Red(),
  new Green(),
  new Yellow()
];

interface TrafficLight {
  // ...
}
